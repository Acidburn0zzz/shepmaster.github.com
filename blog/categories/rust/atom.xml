<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rust | Jake Goulding]]></title>
  <link href="http://jakegoulding.com/blog/categories/rust/atom.xml" rel="self"/>
  <link href="http://jakegoulding.com/"/>
  <updated>2016-05-19T10:46:06-04:00</updated>
  <id>http://jakegoulding.com/</id>
  <author>
    <name><![CDATA[Jake Goulding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust on an Arduino Uno, Part 4]]></title>
    <link href="http://jakegoulding.com/blog/2016/05/12/rust-on-an-arduino-uno-part-4/"/>
    <updated>2016-05-12T13:04:43-04:00</updated>
    <id>http://jakegoulding.com/blog/2016/05/12/rust-on-an-arduino-uno-part-4</id>
    <content type="html"><![CDATA[<p>When we left off, we were <a href="/blog/2016/01/24/rust-on-an-arduino-uno-part-3/">blinking the LED</a>. Let&rsquo;s take a
brief detour and document how to get a working Rust compiler. This is
mostly a way for me to document what I&rsquo;ve been doing so I can find it
again!</p>

<!-- more -->


<p>We are going to start by getting a local version of LLVM that supports
targeting AVR. After cloning <a href="https://github.com/avr-llvm/llvm">the repository</a>, we will need
to set up for a build. Note that the upstream <code>avr-rust-support</code>
branch sometimes lags compared to <code>avr-support</code>, so you will probably
want to merge the two branches to get any updates.</p>

<p><code>
cd avr-llvm
git checkout avr-support
git merge origin/avr-rust-support
mkdir -p debug/build
cd debug/build
</code></p>

<p>We will then configure LLVM. This <em>particular</em> configuration I have
here is based off the current Rust build and is specific to OS X (see
the <code>C_FLAGS</code> and <code>CXX_FLAGS</code>). If you are using a different platform,
you&rsquo;ll need to poke at the Rust build process to see the appropriate
flags.</p>

<p><code>
cmake ../.. \
  -DLLVM_TARGETS_TO_BUILD="X86;AVR" \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_INCLUDE_TESTS=OFF \
  -DLLVM_INCLUDE_DOCS=OFF \
  -DLLVM_ENABLE_ZLIB=OFF \
  -DWITH_POLLY=OFF \
  -DLLVM_ENABLE_TERMINFO=OFF \
  -DLLVM_INSTALL_UTILS=ON \
  -DCMAKE_C_FLAGS="-ffunction-sections -fdata-sections -m64 -fPIC -stdlib=libc++ -mmacosx-version-min=10.7" \
  -DCMAKE_CXX_FLAGS="-ffunction-sections -fdata-sections -m64 -fPIC -stdlib=libc++ -mmacosx-version-min=10.7" \
  -DCMAKE_INSTALL_PREFIX=..
</code></p>

<p>Then it&rsquo;s just a matter of building and installing. Since it created
normal <code>Makefile</code>s for me, I passed an extra make flag to build in
parallel. The LLVM build is pretty fast this way!</p>

<p><code>
cmake --build . -- -j7
cmake --build . --target install
</code></p>

<p>Then we need to build Rust with this custom LLVM. After cloning
<a href="https://github.com/avr-rust/rust">the repository</a>, set up the structure:</p>

<p><code>
cd avr-rust
git checkout avr-support
mkdir -p debug
cd debug/
</code></p>

<p>AVR-LLVM is based on a very new version of LLVM, so we need to use the
in-progress Rust build system called &ldquo;rustbuild&rdquo;. Using in-development
build systems with in-development compilers, what could go wrong?</p>

<p>Note that it&rsquo;s very important to use an absolute path to your LLVM
directory.</p>

<p><code>
../configure \
  --enable-rustbuild \
  --enable-debug \
  --disable-docs \
  --enable-debug-assertions \
  --disable-jemalloc \
  --llvm-root=/absolute/path/to/avr-llvm/debug
</code></p>

<p>Then we build!</p>

<p><code>
make -j7
</code></p>

<p><strong>Hours later</strong>, you will have a fully-built compiler. However, you
can usually get up-and-running earlier by using the stage 1 compiler,
located in <code>debug/build/*/stage1</code>. This will be available pretty
quickly, before the build is complete.</p>

<p>We then add this build as a <a href="https://github.com/brson/multirust">multirust</a> toolchain and use it as the
override compiler in a directory:</p>

<p><code>
multirust override avr --link-local /path/to/rust/debug/build/*/stage1
</code></p>

<p>And for convenience, we will copy in a <a href="https://github.com/rust-lang/cargo#installing-cargo">nightly version of Cargo</a>.</p>

<p><code>
cp cargo-nightly/cargo/bin/cargo /path/to/rust/debug/build/*/stage1/bin/
</code></p>

<p>Note that this will only produce a cross-compiler, but none of the
libraries that make things actually work. That&rsquo;s still coming!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust on an Arduino Uno, Part 4]]></title>
    <link href="http://jakegoulding.com/blog/2016/01/25/rust-on-an-arduino-uno-part-4/"/>
    <updated>2016-01-25T14:41:21-05:00</updated>
    <id>http://jakegoulding.com/blog/2016/01/25/rust-on-an-arduino-uno-part-4</id>
    <content type="html"><![CDATA[<p>Previously, we wrote some code that allowed us to
<a href="">sleep by waiting for a number of cycles to pass</a>. However, we
had to peek at the disassembly to know how many cycles we were
spending and adapt our source code to match. While it got us started,
it&rsquo;s not a very elegant solution.</p>

<!-- more -->


<p>The Arduino Uno uses an ATmega328P processor. One of the features of
this processor are 3 built-in timers that can trigger <em>interrupts</em> at
certain periods. Interrupts are special bits of code that take over
control of the processor when something important happens. These are
often time-critical things that need to be handled quickly.</p>

<p>What would be ideal is if we could rely on the timer feature to
implement our <code>sleep</code> method. To get started, we are going to need the
ability to specify the <em>interrupt vector</em>.</p>

<p>The interrupt vector is a table of 26 instructions that must be placed
at a specific section in memory. Each element in the table corresponds
to a specific interrupt, and should consist of one instruction that
jumps to the appropriate interrupt handler.</p>

<p>To do this, we need to write a little bit of assembly:</p>

<p>```
ivr:</p>

<pre><code>    jmp _ivr_reset
    jmp _ivr_irq0
    jmp _ivr_irq1
    ;; continues for all the rest
</code></pre>

<p>```</p>

<p>In order to use this, we need to include it when linking all of our
code together. We also have to disable the existing interrupt vector
that would be added (the <code>-nostartfiles</code> flag):</p>

<p><code>
avr-gcc -mmcu=atmega328p interrupt_vector.S hello.o -nostartfiles -o hello.elf
</code></p>

<p>If you compile right now, you will get a whole bunch of errors of the
form:</p>

<p><code>
temp_file_name.o: In function `ivr':
(.text+0x0): undefined reference to `_ivr_reset'
</code></p>

<p>Our interrupt vector is trying to jump to a bunch of symbols that we
haven&rsquo;t yet defined. We could do the simple thing and define a bunch
of <code>_ivr_*</code> methods in Rust (and I did, to start with), but that&rsquo;s
rather annoying. Instead, we can use <em>weak linking</em> to define a kind
of &ldquo;fallback&rdquo; symbol. We will have one simple handler that just
returns from the interrupt, and set each handler to use that unless it
is defined:</p>

<p>```
_ivr_undefined:</p>

<pre><code>    reti
</code></pre>

<p>.weak <em>ivr_irq0
.set  </em>ivr_irq0, _ivr_undefined
;;; And so on
```</p>

<p>The only outlier is <code>_ivr_reset</code> which we define to point to our
<code>main</code> method, avoiding extraneous indirection. At this point, we
should be compiling again, but not using the interrupts yet. Let&rsquo;s
change that.</p>

<p>Following <a href="http://www.instructables.com/id/Arduino-Timer-Interrupts/?ALLSTEPS">this guide</a>, we can see all the details of
setting up the timer. At a high level it&rsquo;s:</p>

<ol>
<li>Register an interrupt handler.</li>
<li>Disable interrupts.</li>
<li>Set a bunch of values as determined by the datasheet and math.</li>
<li>Enable interrupts.</li>
</ol>


<p>We will copy all of the values and registers from this article to
setup timer 0, but with a 1kHz rate instead of 2kHz. This matches
nicer with our <code>sleep_ms</code> method which waits milliseconds.</p>

<p>Let&rsquo;s use a little bit of nice Rust for a change. When we disable
interrupts, we <em>really</em> want to make sure we enable them again! In a
language like Rust, we can use a (misleadingly labeled) pattern known
as Resource Acquisition Is Initialization (RAII). We will create a
<code>struct</code> that disables interrupts when it is created and enables them
when the struct is dropped. This means we can never forget as the
compiler will ensure things are restored!</p>

<p>```
struct DisableInterrupts(PhantomData&lt;()>);
impl DisableInterrupts {</p>

<pre><code>fn new() -&gt; DisableInterrupts {
    unsafe { asm!("CLI") }
    DisableInterrupts(PhantomData)
}
</code></pre>

<p>}</p>

<p>impl Drop for DisableInterrupts {</p>

<pre><code>fn drop(&amp;mut self) {
    unsafe { asm!("SEI") }
}
</code></pre>

<p>}
```</p>

<p>We can bundle this into a nice wrapper:</p>

<p>```
fn without_interrupts&lt;F, T>(f: F) &ndash;> T</p>

<pre><code>where F: FnOnce() -&gt; T
</code></pre>

<p>{</p>

<pre><code>let _disabled = DisableInterrupts::new();
f()
</code></pre>

<p>}
```</p>

<p>And use it like so:</p>

<p>```
without_interrupts(|| {</p>

<pre><code>volatile_store(TCCR0A, 0);
</code></pre>

<p>});
```</p>

<p>To define the interrupt handler, we simply create a method that
matches the expected name from our assembly file. The method simply
increments a global variable each time it is triggered:</p>

<p>```
static mut N_MS_ELAPSED: u8 = 0;</p>

<h1>[no_mangle]</h1>

<p>pub unsafe extern fn _ivr_timer0_compare_a() {</p>

<pre><code>N_MS_ELAPSED += 1;
</code></pre>

<p>}
```</p>

<p>And re-implement our <code>sleep_ms</code> function to:</p>

<p>```
fn sleep_ms(duration_ms: u8) {</p>

<pre><code>unsafe {
    volatile_store(&amp;mut N_MS_ELAPSED, 0);
    while volatile_load(&amp;mut N_MS_ELAPSED) &lt; duration_ms {
        // spin
    }
}
</code></pre>

<p>}
```</p>

<p>Compile this and load it onto the board, and we are greeted with the
sight of <em>nothing blinking</em>. It&rsquo;s time to dig into more
disassembly. Here&rsquo;s what <code>_ivr_timer0_compare_a</code> looks like:</p>

<p><code>
lds     r24, 0x0000
inc     r24
sts     0x0000, r24
ret
</code></p>

<p>Checking the instruction set manual and the datasheet, we will notice a few problems:</p>

<ol>
<li>We use <code>ret</code> (Return from Subroutine) instead of <code>reti</code> (Return from Interrupt).</li>
<li>We do not save and restore the Status register.</li>
<li>We do not save and restore the <code>r24</code> register.</li>
</ol>


<p>Let&rsquo;s modify our handler with a bit more assembly to address all three issues:</p>

<p>```</p>

<h1>[no_mangle]</h1>

<p>pub unsafe extern fn _ivr_timer0_compare_a() {</p>

<pre><code>asm!{
    "PUSH R24
     IN R24, 0x3F
     PUSH R24"
};

N_MS_ELAPSED += 1;

asm!{
    "POP R24
     OUT 0x3F, R24
     POP R24
     RETI"
};
</code></pre>

<p>}
```</p>

<p>That&rsquo;s certainly a bit longer, but it compiles and works again! And it
will continue to work, so long as the compiler always decides to use
<code>r24</code> for the incremented value, something we have no control over. As
you might guess, there&rsquo;s a better solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust on an Arduino Uno, Part 3]]></title>
    <link href="http://jakegoulding.com/blog/2016/01/24/rust-on-an-arduino-uno-part-3/"/>
    <updated>2016-01-24T13:11:12-05:00</updated>
    <id>http://jakegoulding.com/blog/2016/01/24/rust-on-an-arduino-uno-part-3</id>
    <content type="html"><![CDATA[<p>Now that we can <a href="/blog/2016/01/17/rust-on-an-arduino-uno-part-2/">turn an LED on</a>, let&rsquo;s see if we can do
something more exciting: make the LED blink. Surprisingly, this is
more difficult than you might expect!</p>

<!-- more -->


<p>Blinking boils down to &ldquo;turn the light on, wait a while, turn the
light off, wait a while&rdquo; and repeat forever. We already know how to
turn the light on and off, as well as repeating forever. The trick
lies in &ldquo;wait a while&rdquo;.</p>

<p>In a conventional Rust application, we&rsquo;d probably call something like
<a href="http://doc.rust-lang.org/std/thread/fn.sleep.html"><code>std::thread::sleep</code></a>, but we don&rsquo;t have access to <code>libstd</code> on an
Arduino as that library is too high-level. We will have to implement
it ourselves!</p>

<p>It&rsquo;s easy enough, all we have to do is loop a bunch of times. If the
Arduino processor runs at 16MHz, we can waste 16000 cycles to take one
millisecond. We will execute a <code>nop</code> instruction to waste the time:</p>

<p>```
fn sleep_ms(duration_ms: u16) {</p>

<pre><code>const FREQUENCY_HZ: u32 = 16_000_000;
const CYCLES_PER_MS: u16 = (FREQUENCY_HZ / 1000) as u16;

for _ in 0..duration_ms {
    for _ in 0..CYCLES_PER_MS {
        unsafe { asm!("nop"); }
    }
}
</code></pre>

<p>}
```</p>

<p>Just compile this and away we go! Or not&hellip;</p>

<p><code>``
error: failed to resolve. Maybe a missing</code>extern crate iter`? [E0433]</p>

<pre><code> for _ in 0..duration_ms {
 ^~~~
</code></pre>

<p>error: unresolved name <code>iter::IntoIterator::into_iter</code> [E0425]
```</p>

<p>Right, we haven&rsquo;t actually defined any of the <code>Iterator</code> logic; that&rsquo;s
in <code>libcore</code> which we don&rsquo;t have yet. Let&rsquo;s skip that and do something
a little more C-like. We can just loop and increment integers and
compare them:</p>

<p>```
fn sleep_ms(duration_ms: u16) {</p>

<pre><code>const FREQUENCY_HZ: u32 = 16_000_000;
const CYCLES_PER_MS: u16 = 16_000;

let mut outer = 0;
while outer &lt; duration_ms {
    let mut inner = 0;
    while inner &lt; CYCLES_PER_MS {
        unsafe { asm!("nop"); }
        inner += 1;
    }
    outer += 1;
}
</code></pre>

<p>}
```</p>

<p>And&hellip; that fails too:</p>

<p><code>``
error: binary operation</code>/<code>cannot be applied to type</code>u32` [E0369]</p>

<pre><code> const CYCLES_PER_MS: u16 = (FREQUENCY_HZ / 1000) as u16;
                             ^~~~~~~~~~~~
</code></pre>

<p>```</p>

<p>Ok, no division, even if it is just a constant and should be computed
at compile time. Well, we can hard code it for the moment&hellip;</p>

<p><code>``
error: binary operation</code>&lt;<code>cannot be applied to type</code>_` [E0369]</p>

<pre><code> while outer &lt; duration_ms {
       ^~~~~
</code></pre>

<p>error: binary assignment operation <code>+=</code> cannot be applied to type <code>u16</code> [E0368]</p>

<pre><code>     outer += 1;
     ^~~~~
</code></pre>

<p>```</p>

<p>OK, wow, no addition or comparison either. There&rsquo;s no way around
this &ndash; we really need <code>libcore</code> or else we are stuck with a pretty
primitive environment. Since we know we have issues compiling all of
libcore, let&rsquo;s try a smaller part, just enough to compile this
example.</p>

<p>Previously, we had copied in some small snippets from libcore, but
let&rsquo;s replace those excerpts with the complete files and drag in a few
more. After some trial-and-error, this small set compiles:</p>

<ul>
<li><code>clone</code></li>
<li><code>cmp</code></li>
<li><code>intrinsics</code></li>
<li><code>marker</code></li>
<li><code>ops</code></li>
<li><code>option</code></li>
</ul>


<p>With it compiling, let&rsquo;s actually call <code>sleep_ms</code> in our <code>main</code> and
load the program onto the board:</p>

<p>```
loop {</p>

<pre><code>sleep_ms(500);
volatile_store(PORTB, 0xFF); // Everything is on
sleep_ms(500);
volatile_store(PORTB, 0x00); // Everything is off
</code></pre>

<p>}
```</p>

<p><video src="http://jakegoulding.com/images/blog/arduino_led/blink.mp4" controls>
<a href="http://jakegoulding.com/images/blog/arduino_led/blink.mp4">
A video of the blinking LED.
</a>
</video></p>

<p>Look at that nice, steady blinking. Blinking at a rate that is
<em>nothing</em> like 500 milliseconds. Let&rsquo;s take a look at the disassembly
for the inner loop to understand why:</p>

<p><code>
adiw ;; Add word (16-bit)            ;; 2 cycles
cp   ;; Compare registers            ;; 1 cycle
cpc  ;; Compare registers with carry ;; 1 cycle
brcs ;; Branch if carry set          ;; 1 cycle (false) / 2 cycles (true)
</code></p>

<p>We increment our counter and check to see if we&rsquo;ve exceeded our
limit. In all cases except the last iteration we will branch back to
the beginning of the loop, bringing the total cycle count of the loop
to six. Compare that to the naive calculation that the <code>nop</code> would
take one cycle and the rest of the loop would be free. Dividing the
inner loop constant by six gets us much closer to the appropriate
duration.</p>

<p>The outer loop and the function call itself also have some overhead,
but these only add up to a few cycles per inner loop. Since the inner
loop corresponds to many thousands of cycles, a few cycles is a small
error and I think can be safely ignored.</p>

<p>An interesting aside is that I have no idea why the <code>nop</code> does not
occur inside the loop. The compiler has reordered the code such that
the <code>nop</code> occurs in the variable initialization of the function. You
can change the code to just <code>asm!("")</code> and accomplish the same goal of
preventing the loop from being optimized away.</p>

<p>Next time, we will see if we can do something a little more structured
than counting cycles to sleep. As before, check out
<a href="https://github.com/shepmaster/rust-arduino-blink-led-no-core/tree/part3">the repository</a> for the code up to this point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust on an Arduino Uno, Part 2]]></title>
    <link href="http://jakegoulding.com/blog/2016/01/17/rust-on-an-arduino-uno-part-2/"/>
    <updated>2016-01-17T14:34:54-05:00</updated>
    <id>http://jakegoulding.com/blog/2016/01/17/rust-on-an-arduino-uno-part-2</id>
    <content type="html"><![CDATA[<p>After my <a href="/blog/2016/01/02/rust-on-an-arduino-uno/">previous attempt</a>, I started to think that the
issues were caused by an inability to completely link the program. If
that were the case, could we try to link in a different way?</p>

<p>Through a bit of trial and error, I was able to generate an object
file:</p>

<p><code>
rustc --target avr-atmel-none hello.rs --emit obj
</code></p>

<!-- more -->


<p>Checking the disassembly of this file with <code>objdump -d hello.o</code> showed
promise:</p>

<p>```
00000000 <main>:
   0:   0e 94 00 00     call    0     ; 0x0 <main>
   4:   08 95           ret</p>

<p>Disassembly of section .text._ZN4main10__rust_abiE:</p>

<p>00000000 &lt;_ZN4main10__rust_abiE>:
   0:   8f ef           ldi r24, 0xFF ; 255
   2:   84 b9           out 0x04, r24 ; 4
   4:   00 c0           rjmp    .+0   ; 0x6 &lt;LBB1_1></p>

<p>00000006 &lt;LBB1_1>:
   6:   8f ef           ldi r24, 0xFF ; 255
   8:   85 b9           out 0x05, r24 ; 5
   a:   80 e0           ldi r24, 0x00 ; 0
   c:   85 b9           out 0x05, r24 ; 5
   e:   fb cf           rjmp    .-10  ; 0x6 &lt;LBB1_1>
```</p>

<p>I then used an existing installation of GCC with AVR support to finish
linking the code together:</p>

<p><code>
avr-gcc -mmcu=atmega328p hello.o -o hello.elf
</code></p>

<p>Taking a look at the disassembly of this code shows a lot of things
that were not present in the original object file:</p>

<ol>
<li>The interrupt vector table is established. This occupies about the
first 25 instructions. Each instruction is a jump to the
appropriate interrupt handler. Most importantly, table index 0 is
the reset &ldquo;interrupt&rdquo; which controls where the processor should
jump to when it is initialized.</li>
<li>The EEPROM Control Register and GPIOR0 are initialized and external
interrupts are disabled. Then <code>main</code> is called.</li>
<li>After <code>main</code> returns, interrupts are disabled and the chip goes
into an infinite loop.</li>
</ol>


<h3>Getting code on board</h3>

<p>Now that we have a compiled binary, we need to get it onto the Arduino
proper. <a href="http://www.nongnu.org/avrdude/">avrdude</a> is an in-system programmer that will allow us to
upload the compiled code, but it prefers input in a different format:
Intel HEX. We can convert using <code>avr-objcopy</code>:</p>

<p><code>
avr-objcopy -O ihex -R .eeprom hello.elf hello.hex
</code></p>

<p>Now we can upload to the Arduino:</p>

<p><code>
avrdude -p atmega328p -c arduino -P /dev/cu.usbmodem1411 -U flash:w:hello.hex:i
</code></p>

<p>The Arduino Uno has a second Atmel chip (ATmega16U2) that looks like a
USB-to-serial device to the host computer. On my OS X computer, that
device shows up at <code>/dev/cu.usbmodem1411</code>. Your location will differ.</p>

<h3>It&rsquo;s alive!</h3>

<p>Because I have such a basic level of code, I can&rsquo;t do anything nice
like blink an LED. Instead, I can write a tight loop that just turns
the LED on or off some percentage of the time. This allows it to have
a different relative brightness, which in turn lets me see that the
code changes are actually happening.</p>

<p>Check out the LED marked <code>L</code> in the following pictures.</p>

<h4>LED on 100% of the time</h4>

<p><img src="http://jakegoulding.com/images/blog/arduino_led/100.jpg" alt="LED at 100%" /></p>

<h4>LED on 50% of the time</h4>

<p><img src="http://jakegoulding.com/images/blog/arduino_led/050.jpg" alt="LED at 50%" /></p>

<h4>LED on 1% of the time</h4>

<p><img src="http://jakegoulding.com/images/blog/arduino_led/001.jpg" alt="LED at 1%" /></p>

<h3>What&rsquo;s next?</h3>

<p>This isn&rsquo;t the most <em>elegant</em> of solutions, and there are a lot of
avenues to explore:</p>

<ol>
<li><p><strong>Avoid installing <code>avr-gcc</code> and <code>avr-objcopy</code></strong>. Right now,
<code>avr-gcc</code> is used when compiling Rust itself (for <code>compiler-rt</code>)
and to finish assembly of the executable. It would be ideal if all
of this could be handled within an AVR-enabled Rust or LLVM.</p></li>
<li><p><strong>Set interrupt handlers</strong>. I think the typical solution is
to use a linker script, but that&rsquo;s one more moving piece I&rsquo;d like
to avoid adding.</p></li>
<li><p><strong>Compile <code>libcore</code></strong>! In order to get the most basic of things
to compile, I had to straight-up copy code from <code>libcore</code>. An
impressive amount of things are included there. Things you might
want to use, like <em>addition</em>, not to mention <code>Option</code> or anything
having to do with iterators. <code>libstd</code> is unlikely to ever be
supported as it relies on memory allocation.</p></li>
<li><p><strong>Merge the Rust fork of LLVM with the AVR fork of LLVM</strong>. The more
frequently these are merged, the easier it will be to eventually
include the AVR support in Rust proper. I started to do this, but
had a large number of merge conflicts so I backed off.</p></li>
<li><p><strong>Compile AVR-enabled Rust in non-debug mode</strong>. For some reason,
when I compile Rust without debugging symbols, I get an &ldquo;exciting&rdquo;
assertion failure from deep within LLVM. That is most likely a
symptom of some problem that should be fixed.</p></li>
</ol>


<h3>TL;DR</h3>

<p>Check out <a href="https://github.com/shepmaster/rust-arduino-blink-led-no-core/tree/part2">my repo</a> for an example that worked for me. In short:</p>

<p>```</p>

<h1>Compile object</h1>

<p>rustc &mdash;target avr-atmel-none -C target-cpu=atmega328p &mdash;emit=obj hello.rs -o hello.o</p>

<h1>Link together</h1>

<p>avr-gcc -mmcu=atmega328p hello.o -o hello.elf</p>

<h1>Reformat for upload</h1>

<p>avr-objcopy -O ihex -R .eeprom hello.elf hello.hex</p>

<h1>Upload to the board</h1>

<p>avrdude -p atmega328p -c arduino -P /dev/cu.usbmodem1411 -U flash:w:hello.hex:i
```</p>

<p>If you are on OS X, you can install the things you need (except an
AVR-enabled Rust build) with <a href="http://brew.sh/">homebrew</a>:</p>

<p><code>
brew tap osx-cross/avr
brew install avr-libc
brew install avrdude
</code></p>

<p>Continue on to <a href="/blog/2016/01/17/rust-on-an-arduino-uno-part-2/">part 3</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust on an Arduino Uno]]></title>
    <link href="http://jakegoulding.com/blog/2016/01/02/rust-on-an-arduino-uno/"/>
    <updated>2016-01-02T15:26:54-05:00</updated>
    <id>http://jakegoulding.com/blog/2016/01/02/rust-on-an-arduino-uno</id>
    <content type="html"><![CDATA[<p>We have an <a href="https://www.arduino.cc/en/Main/ArduinoBoardUno">Arduino Uno</a> that&rsquo;s been sitting around gathering
dust for a little while, so I decided to see how <a href="https://www.rust-lang.org/">Rust</a> worked
on it.</p>

<!-- more -->


<p>A bit of searching led to a
<a href="https://github.com/avr-rust/rust/">fork of Rust with AVR support, AVR-Rust</a>. This is built on
top of a <a href="https://github.com/avr-llvm/llvm/">fork of LLVM with AVR support, AVR-LLVM</a>. Both of
these projects are led by <a href="https://github.com/dylanmckay">Dylan McKay</a>.</p>

<p>The current documentation for AVR-Rust is a bit lacking, and it was
forked from a development version of Rust 1.4. The current development
version is Rust 1.7, making the fork about 4.5 months old. However,
the changes to LLVM are in the process of being merged into upstream,
laying the groundwork for merging the changes into Rust as well.</p>

<p>Let&rsquo;s start out by doing the bare minimum and try to get a version of
<code>rustc</code> that can target the AVR chip:</p>

<p><code>
git clone https://github.com/avr-rust/rust.git
mkdir build &amp;&amp; cd build
../rust/configure
make
</code></p>

<p>You&rsquo;ll note that there&rsquo;s nothing AVR specific here. Every Rust
compiler is actually a <em>cross-compiler</em>, a compiler that executes on
one architecture but produces code for another architecture. Because
this fork of Rust has support files for AVR, it will be able to
produce the correct executable code.</p>

<p>Unfortunately, I <a href="https://github.com/avr-rust/rust/issues/13">couldn&rsquo;t get a basic file to compile</a>
out of the box.</p>

<p>So I did what any sane person would do &ndash; I started changing code
without knowing exactly what the failure was or what the code I was
changing did.</p>

<p>First I tried updating the branch of LLVM that AVR-Rust uses. There
are two branches in the repository &ndash; <a href="https://github.com/avr-llvm/llvm/tree/avr-support"><code>avr-support</code></a> is more
actively updated and <a href="https://github.com/avr-llvm/llvm/tree/avr-rust-support"><code>avr-rust-support</code></a> lags behind.</p>

<p>Merging <code>avr-support</code> into <code>avr-rust-support</code> went smoothly, but the
Rust LLVM driver code needed to be updated to handle the newer LLVM
version. I grabbed the diff from the main Rust repository and applied
that. This seemed to work, but then I got a segfault from the stage 1
Rust compiler, deep in the internals of LLVM.</p>

<p><code>
make: *** [x86_64-apple-darwin/stage1/lib/rustlib/x86_64-apple-darwin/lib/stamp.term] Segmentation fault: 11
</code></p>

<p>So I continued changing more stuff!</p>

<p>I merged current Rust into the AVR fork of Rust and resolved the merge
conflicts as best I could figure out. After fixing a few new errors
and some poor merge conflicts, I was on my way. Until I hit the
segfault again.</p>

<p>That means it&rsquo;s actually time to try to figure out where the segfault
was coming from. I configured another build with some debug information:</p>

<p><code>
./configure --enable-debug --disable-docs --enable-llvm-assertions --enable-debug-assertions
</code></p>

<p>And built. This takes a long time, as nothing gets optimized. And then
it turns out that doing this also hides the segfault. Ugh.</p>

<p>However, I do get to a new error:</p>

<p><code>
ld: unknown option: --as-needed
clang: error: linker command failed with exit code 1 (use -v to see invocation)
</code></p>

<p>Fortunately, I know where to tweak that in the source. The downside is
I&rsquo;ll need to wait for another long build cycle&hellip;</p>

<p>Continue on to <a href="/blog/2016/01/17/rust-on-an-arduino-uno-part-2/">part 2</a>.</p>
]]></content>
  </entry>
  
</feed>
