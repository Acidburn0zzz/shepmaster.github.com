<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: refactoring | Jake Goulding]]></title>
  <link href="http://jakegoulding.com/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="http://jakegoulding.com/"/>
  <updated>2014-04-26T18:24:35-04:00</updated>
  <id>http://jakegoulding.com/</id>
  <author>
    <name><![CDATA[Jake Goulding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactor and make changes in different commits]]></title>
    <link href="http://jakegoulding.com/blog/2012/11/04/refactor-and-make-changes-in-different-commits/"/>
    <updated>2012-11-04T14:31:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2012/11/04/refactor-and-make-changes-in-different-commits</id>
    <content type="html"><![CDATA[<p>If you combine refactoring and making a change to your code into the
same commit, you are going to have a bad time.</p>

<!-- more -->


<p>Just in case you&rsquo;ve forgotten, <a href="http://en.wikipedia.org/wiki/Refactoring">refactoring</a> is</p>

<blockquote><p>the process of changing a computer program&rsquo;s source code without
modifying its external functional behavior</p></blockquote>

<p>When I review a commit that claims to be refactoring, I shift into to
a very specific mindset. I visualize myself as a world-class goalie,
ready to stop any rogue features that come my way; I&rsquo;m going to stand
my ground, no matter what.</p>

<p>Contrast refactoring to adding new functionality. In that case, the
author should be adding new objects that fulfill a responsibility,
following the <a href="http://en.wikipedia.org/wiki/Open/closed_principle">open/closed principle</a>. When I review a commit
that adds new functionality, I pay attention that the tests cover the
new functionality, the minimum amount of code was added, and that the
new code is sufficient.</p>

<p>These are very different things to review for.</p>

<h3>Why&rsquo;s it bad?</h3>

<p>When you combine refactoring and feature addition into the same
commit, you double the work required to review it. In addition to
figuring out if each changed line is correct, you also have to figure
out what &ldquo;correct&rdquo; even means!</p>

<p>Beyond the doubled work, you have to change your mindset for <strong>every
line of code</strong>. That&rsquo;s an amazing amount of context switching. It&rsquo;s
very hard to thoroughly review each line when it&rsquo;s hard to even
remember what you are reviewing for.</p>

<p>Combining these disparate actions into one commit isn&rsquo;t something that
we do maliciously. In fact, it&rsquo;s likely the opposite: good programmers
have an innate drive to make the code better all the time. Sometimes
we see a little problem that we just <em>have</em> to fix up.</p>

<p>The problem is that when we have our programmer hats on, we don&rsquo;t
always think about what this commit will mean to others
downstream. This could mean reviewers, approvers, testers,
documenters, whatever needs to happen after the commit.</p>

<h3>What do I do when my commit is too big?</h3>

<p>There are a few main techniques I use when I discover I&rsquo;ve done work
that should be in different commits.</p>

<p>If I haven&rsquo;t committed yet, and the changes are separate enough, I use
<code>git add -pu</code> to add certain lines of code and not others.</p>

<p>If the changes overlap with each other, I will edit a specific section
of the file until it looks like the intermediate change I really
wanted. I <code>git add</code> the file and immediately revert my editor
changes. I then repeat with the next section.</p>

<p>If I have already committed, then I go into an interactive rebase and
<code>edit</code> the particular commits that are too big. I often create a
throw-away branch so I can easily compare the original and modified
branches to make sure they end up the same.</p>

<p>All of these techniques create &ldquo;false history&rdquo; &ndash; I didn&rsquo;t <em>really</em>
make that small step. After I&rsquo;m finished, I run a little script that
checks out each commit and runs my tests.</p>

<p>Sometimes, trying to preserve my changes isn&rsquo;t worth the time, or I
can see into the future a bit and know ahead of time that I am about
to make a big set of changes. In these cases, I try a spike: I make
the changes willy-nilly, writing down each step as I do it. Then I
throw it away and <em>invert the order of steps</em>. This allows each step
to happen in the order I would prefer, and I often improve on each
step.</p>

<h3>Isn&rsquo;t too many small commits just as bad?</h3>

<p>I&rsquo;ve heard something like this before:</p>

<blockquote><p>It&rsquo;s so small, it doesn&rsquo;t deserve it&rsquo;s own commit</p></blockquote>

<p>I&rsquo;ve <strong>never</strong> had to review a commit that was too small. I have had
to review a commit that was too large. I&rsquo;m willing to take the risk of
creating many small commits, especially if all the changes are going
to be made one way or another.</p>

<p>If a commit is small, then I can open it, read the commit message, and
review it within seconds.</p>

<h3>What do I do as a reviewer?</h3>

<p>I use a modified version of the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">single responsibility principle</a>
that applies to commits:</p>

<blockquote><p>A commit should have one, and only one, change.</p></blockquote>

<p>I try to follow steps like these:</p>

<ol>
<li>Read the whole commit message. It should have no <strong>and</strong>s, <strong>or</strong>s,
or <strong>but</strong>s. If it does, I kick it back to the author and request that
the commit be split up into those pieces. Otherwise, I sear the commit
message into my brain.</li>
<li>Read the diff of the commit and evaluate each change against the
commit message. If a line doesn&rsquo;t fit with the message, mark the
change as unrelated. If it does, review the line as usual.</li>
<li>Sometimes I keep reading the diff once you I find an unrelated
line, other times I stop at the first one; the original author may be
faster at separating the concerns.</li>
<li>Make sure to thank the author when they provide a commit with a
single focus &ndash; positive reinforcement lets us know that we are on the
right track!</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A refactoring example: lots of if-else statements on strings]]></title>
    <link href="http://jakegoulding.com/blog/2012/09/24/a-refactoring-example-if-else-on-strings/"/>
    <updated>2012-09-24T12:00:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/09/24/a-refactoring-example-if-else-on-strings</id>
    <content type="html"><![CDATA[<p>I recently did a bit of work that turned out to be a great exercise
for refactoring a huge sequence of if-else statements based on
strings. There are a few ugly bits left, so I&rsquo;m still poking at it,
but I am pleased with my progress so far.</p>

<!-- more -->


<p>While the original code was Java, the meat of the problem can be
easily shown in Ruby. Translating it to Ruby also makes it easier to
make sure I don&rsquo;t accidentally share any proprietary information!</p>

<p>The problem involves processing a hunk of XML to create nested
configuration objects. The original implementation used a sequence of
if-else blocks, but the Ruby version would have used a <code>case</code>
statement.</p>

<p>```ruby
class ObjectsFromXML
  def process(parent, element)</p>

<pre><code>new_object = nil

case element.name
when 'foo'
  f = Foo.new(element['name'])
  parent.add(f)
  new_object = f
when 'bar'
  b = Bar.new(element['name'])
  b.weight = element['weight'].to_f
  parent.add(b)
  new_object = b
# ... about 20 of these cases in total
else
  raise "Invalid node"
end

element.children.each { |c| process(new_object, c) }
</code></pre>

<p>  end
end
```</p>

<p>This function has some issues: it is pretty long, and each case has
some similarity to the next but are different enough to be
annoying. The code certainly doesn&rsquo;t try to adhere to the Single
Responsibility Principle!</p>

<p>My first step was to split the blocks into classes with a common interface.</p>

<p>```ruby
class FooHandler
  def process(parent, element)</p>

<pre><code>Foo.new(element['name']).tap |f|
  parent.add(f)
end
</code></pre>

<p>  end
end</p>

<p>class BarHandler
  def process(parent, element)</p>

<pre><code>Bar.new(element['name']).tap
  b.weight = element['weight'].to_f
  parent.add(b)
end
</code></pre>

<p>  end
end</p>

<p>class ObjectsFromXML
  def process(parent, element)</p>

<pre><code>new_object = nil

case element.name
when 'foo'
  new_object = FooHandler.new.process(parent, element)
when 'bar'
  new_object = BarHandler.new.process(parent, element)
# ... other cases
else
  raise "Invalid node"
end

element.children.each { |c| process(new_object, c) }
</code></pre>

<p>  end
end
```</p>

<p>This corrals the item-specific code to an item-specific class. If I
need to change how the Bar class is created, only the BarHandler class
needs to be updated.</p>

<p>```ruby
class FooHandler
  # As above&hellip;
end</p>

<p>class BarHandler
  # As above&hellip;
end</p>

<p>class ObjectsFromXML
  attr_reader :handlers</p>

<p>  def initialize</p>

<pre><code>@handlers = {}
handlers['foo'] = FooHandler.new
handlers['bar'] = BarHandler.new
# ... other cases
</code></pre>

<p>  end</p>

<p>  def process(parent, element)</p>

<pre><code>handler = handlers.fetch(element.name) { raise "Invalid node" }
new_object = handler.process(parent, element)
element.children.each { |c| process(new_object, c) }
</code></pre>

<p>  end
end
```</p>

<p>Now all the handlers are in a hash, keyed by the expected element
name. This allows me to pull out the correct handler and go. The
<code>process</code> function now only needs to be concerned with picking the
right handler and dealing with children elements.</p>

<p>```ruby
class FooHandler
  # As above&hellip;</p>

<p>  def element_name</p>

<pre><code>'foo'
</code></pre>

<p>  end
end</p>

<p>class BarHandler
  # As above&hellip;</p>

<p>  def element_name</p>

<pre><code>'bar'
</code></pre>

<p>  end
end</p>

<p>class Handlers
  def initialize</p>

<pre><code>@handlers = {}
</code></pre>

<p>  end</p>

<p>  def add(handler)</p>

<pre><code>@handlers[handler.element_name] = handler
</code></pre>

<p>  end</p>

<p>  def process(parent, element)</p>

<pre><code>handler = handlers.fetch(element.name) { raise "Invalid node" }
handler.process(parent, element)
</code></pre>

<p>  end
end</p>

<p>class ObjectsFromXML
  attr_reader :handlers</p>

<p>  def initialize</p>

<pre><code>@handlers = Handlers.new
handlers.add(FooHandler.new)
handlers.add(BarHandler.new)
# ... other cases
</code></pre>

<p>  end</p>

<p>  def process(parent, element)</p>

<pre><code>new_object = handlers.process(parent, element)
element.children.each { |c| process(new_object, c) }
</code></pre>

<p>  end
end
```</p>

<p>Now we have moved the concept of the expected element name into the
handler itself. This makes sense, as each handler should know what
name it expects, not some other piece of code. I also took the
opportunity to move the code purely related to the handlers to a new
class that is highly focused on that one responsibility.</p>

<p>Some further refinements happened after this last point. The
<code>ObjectsFromXML</code> class became another <code>Handler</code> class, which made it
the same level of abstraction as the other handlers and removed a
redundant <code>process</code> method. The return code was removed because it
wasn&rsquo;t used except in a few tests. Iterating over children was moved
to each class that could contain children.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When refactoring isn't refactoring]]></title>
    <link href="http://jakegoulding.com/blog/2012/01/02/when-refactoring-isnt-refactoring/"/>
    <updated>2012-01-02T12:00:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2012/01/02/when-refactoring-isnt-refactoring</id>
    <content type="html"><![CDATA[<p>What is refactoring? Martin Fowler <a href="http://martinfowler.com/refactoring/">provides</a> a solid
definition:</p>

<blockquote><p>Refactoring is a disciplined technique for restructuring an
existing body of code, altering its internal structure without
changing its external behavior.</p></blockquote>

<p>That description seems fairly reasonable; let&rsquo;s look at some potential
refactoring techniques.</p>

<!-- more -->


<h2>Example 1</h2>

<h4>Before</h4>

<p>```ruby
class A
  def foobar</p>

<pre><code>'foo' + 'bar'
</code></pre>

<p>  end
end
```</p>

<h4>After</h4>

<p>```ruby
class A
  def foobar</p>

<pre><code>'foo' + bar
</code></pre>

<p>  end</p>

<p>  def bar</p>

<pre><code>'bar'
</code></pre>

<p>  end
end
```</p>

<p>This one is pretty clear-cut &ndash; it&rsquo;s a refactoring technique that any
programmer would recognize, even if she had never heard of the term
&ldquo;refactoring&rdquo;. It goes by the name <a href="http://martinfowler.com/refactoring/catalog/extractMethod.html">Extract Method</a>.</p>

<h2>Example 2</h2>

<h4>Before</h4>

<p>```ruby
class A
  def alphabet</p>

<pre><code>'alpha' + bet
</code></pre>

<p>  end</p>

<p>  def bet</p>

<pre><code>'bet'
</code></pre>

<p>  end
end
```</p>

<h4>After</h4>

<p>```ruby
class A
  def alphabet</p>

<pre><code>'alpha' + 'bet'
</code></pre>

<p>  end
end
```</p>

<p>This is the inverse of the first example, but is it a refactoring
technique?  There is a technique called
<a href="http://martinfowler.com/refactoring/catalog/inlineMethod.html">Inline Method</a>, so it certainly seems plausible.</p>

<h2>Example 3</h2>

<h4>Before</h4>

<p>```ruby
class Parent
end</p>

<p>class A &lt; Parent
  def greet</p>

<pre><code>'hello'
</code></pre>

<p>  end
end</p>

<p>class B &lt; Parent
end
```</p>

<h4>After</h4>

<p>```ruby
class Parent
  def greet</p>

<pre><code>'hello'
</code></pre>

<p>  end
end</p>

<p>class A &lt; Parent
end</p>

<p>class B &lt; Parent
end
```</p>

<p>Again, there is a related refactoring technique,
<a href="http://martinfowler.com/refactoring/catalog/pullUpMethod.html">Pull Up Method</a>. This example differs from the linked
one, as only one of the subclasses has the method definition to start
with. This difference makes us less ready to call our changes
refactoring.</p>

<p>Here&rsquo;s the trick: from just the code above, <strong>you can&rsquo;t tell if these
changes constitute refactoring or not</strong>.</p>

<h2>In which details are examined</h2>

<p>The distinction comes from two important words in the definition of
refactoring: <em>internal</em> and <em>external</em>. These three examples only show
the code being changed (the internal structure), not how other objects
interact with this code (the external behavior).</p>

<p>Take a look at the second example &ndash; if any object in the entire system
ever calls the <code>bet</code> method, then removing the method will cause the
behavior of the system as a whole to change.</p>

<p>The first and third examples are actually the same from this point of
view &ndash; they both add a new method. You might think that adding a
method is safe, but in truth it depends on the circumstances.</p>

<p>In a statically-typed language, adding a method is safe because no
other code could have tried to call the method without getting a
syntax error. In contrast, a dynamically-typed language like Ruby can
make runtime decisions based on what methods an object
implements. This means that adding a method might trigger completely
new behavior elsewhere.</p>

<h2>In which time is considered</h2>

<p>Let&rsquo;s focus on the third example and assume that the above caveat
about adding methods in dynamically-typed languages doesn&rsquo;t apply.</p>

<p>First, we decide that the code would be better if we moved the <code>greet</code>
method from <code>A</code> to <code>Parent</code>. This change would be refactoring &ndash; no
external behavior has changed.</p>

<p>Second, instead of just making the code better, assume that user
feedback suggests that that the <code>B</code> class needs a <code>greet</code> method. This
means that we:</p>

<ol>
<li>Create a failing test for our new functionality.</li>
<li>Move the <code>greet</code> method from <code>A</code> to <code>Parent</code>.</li>
</ol>


<p>Even though the code is modified in the same way for both examples,
the second time is <em>not refactoring</em> &ndash; we are changing the behavior of
the system from failing to passing. The only difference is that time
has passed and the requirements of the system are different.</p>

<h2>In which exceptions are noted</h2>

<p>All three of the original examples have one thing in common: they all
show refactoring techniques that change the interface of the
class. Doing so means that collaborating objects must be viewed as the
external code that relies on certain behavior.</p>

<p>Some refactoring techniques change code only within a single method,
such as <a href="http://martinfowler.com/refactoring/catalog/splitLoop.html">Split Loop</a>. In most cases, these techniques
don&rsquo;t have to worry about changing the external behavior. Intra-method
refactoring can only cause a problem when the method has side-effects
that are visible outside of the method.</p>

<p>Another factor that can come into play is the visibility of the
method(s) being refactored. If they are <code>private</code> (or whatever
language equivalent), you can feel more secure when refactoring. This
is because limited visibility restricts what code can be considered
external.</p>

<h2>In which the real world is consulted</h2>

<p>It is imperative to consider the environment in which code exists
before refactoring it; if the environment is ignored, then you cannot
possibly understand the desired behavior of the code.</p>

<p>A main point from the blog post
<a href="http://hamletdarcy.blogspot.com/2009/06/forgotten-refactorings.html">Forgotten Refactorings</a> by Hamlet D'Arcy is that it&rsquo;s
not really refactoring if the code being changed isn&rsquo;t covered by
tests. This is because tests are the single-best way to nail down the
expectations of the behavior of a system, with the benefit that they
are continually verified.</p>

<p>It is also interesting to note that the order in which code is
modified can alter if you are performing a refactoring or not. While
there probably isn&rsquo;t a practical difference between the two paths, I
cannot help but wonder if choosing one or the other will have some
practical benefit.</p>

<p>Discuss this post on <a href="http://www.reddit.com/r/programming/comments/nzzfu/when_refactoring_isnt_refactoring/">reddit</a> or <a href="http://news.ycombinator.com/item?id=3416749">Hacker News</a>.</p>
]]></content>
  </entry>
  
</feed>
