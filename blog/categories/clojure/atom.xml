<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | Jake Goulding]]></title>
  <link href="http://jakegoulding.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://jakegoulding.com/"/>
  <updated>2013-01-16T21:05:24-05:00</updated>
  <id>http://jakegoulding.com/</id>
  <author>
    <name><![CDATA[Jake Goulding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Game of Life in Clojure]]></title>
    <link href="http://jakegoulding.com/blog/2011/09/18/game-of-life-in-clojure/"/>
    <updated>2011-09-18T11:22:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2011/09/18/game-of-life-in-clojure</id>
    <content type="html"><![CDATA[<p>I've been trying to learn <a href="http://clojure.org">Clojure</a> recently, so I wrote
<a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway's Game of Life</a>. I'm sure that the code is highly
non-idiomatic, but I'd rather get it out into the wild, instead of
sitting on my disk.</p>

<!-- more -->


<p>Note that I have inline tests (the simple <code>println</code> statements) mostly
because I wasn't trying to figure out how to properly test in Clojure
(yet).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (life.clj)</span> <a href='/downloads/code/life.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.set</span> <span class="ss">:as</span> <span class="nv">set</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; I feel that there are too many explicit conversions with `set`, but</span>
</span><span class='line'><span class="c1">;; I&#39;m not sure how to remove them.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Reusable test cells</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">center</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">top-left</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">-1</span> <span class="ss">:y</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">top-right</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">bottom-left</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">-1</span> <span class="ss">:y</span> <span class="mi">-1</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">bottom-right</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">-1</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">neighbors</span>
</span><span class='line'>  <span class="s">&quot;Finds all cells that are neighbors of the given cell&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cell</span> <span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">neighbor?</span> <span class="p">[</span><span class="nv">poss</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="p">(</span><span class="nf">poss</span> <span class="ss">:x</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nf">cell</span> <span class="ss">:x</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nf">poss</span> <span class="ss">:x</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nf">cell</span> <span class="ss">:x</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">&gt;= </span><span class="p">(</span><span class="nf">poss</span> <span class="ss">:y</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nf">cell</span> <span class="ss">:y</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nf">poss</span> <span class="ss">:y</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nf">cell</span> <span class="ss">:y</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="nv">poss</span> <span class="nv">cell</span><span class="p">))))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">filter </span><span class="nv">neighbor?</span> <span class="nv">cells</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;* neighbors&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">bottom-left</span> <span class="nv">top-right</span><span class="p">}</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">neighbors</span> <span class="nv">center</span> <span class="p">[</span><span class="nv">bottom-left</span> <span class="nv">center</span> <span class="nv">top-right</span><span class="p">])))</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">center</span><span class="p">}</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">neighbors</span> <span class="nv">bottom-left</span> <span class="p">[</span><span class="nv">bottom-left</span> <span class="nv">center</span> <span class="nv">top-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kill-off</span>
</span><span class='line'>  <span class="s">&quot;Removes cells that do not have enough neighbors to stay alive&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">n_neighbors</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nf">neighbors</span> <span class="nv">%</span> <span class="nv">cells</span><span class="p">))]</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">n_neighbors</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">&gt; </span><span class="nv">n_neighbors</span> <span class="mi">3</span><span class="p">)))</span>
</span><span class='line'>               <span class="nv">cells</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;* kill-off&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with no neighbors dies</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with one neighbor dies</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span> <span class="nv">top-left</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with two neighbors lives</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">center</span><span class="p">}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span> <span class="nv">top-left</span> <span class="nv">top-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with three neighbors lives</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">center</span><span class="p">}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span> <span class="nv">top-left</span> <span class="nv">top-right</span> <span class="nv">bottom-left</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with four neighbors dies</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span> <span class="nv">top-left</span> <span class="nv">top-right</span> <span class="nv">bottom-left</span> <span class="nv">bottom-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">all-neighbors</span>
</span><span class='line'>  <span class="s">&quot;Finds the cells in a 3x3 area around the given cell&quot;</span>
</span><span class='line'>  <span class="p">[{</span><span class="nv">x</span> <span class="ss">:x</span> <span class="nv">y</span> <span class="ss">:y</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x-mod</span> <span class="p">(</span><span class="nb">range </span><span class="mi">-1</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">y-mod</span> <span class="p">(</span><span class="nb">range </span><span class="mi">-1</span> <span class="mi">2</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:x</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">x-mod</span><span class="p">)</span> <span class="ss">:y</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="nv">y-mod</span><span class="p">)}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">interesting-cells</span>
</span><span class='line'>  <span class="s">&quot;Finds all cells that could potentially change on a given step&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="nv">set/union</span> <span class="p">(</span><span class="nb">map </span><span class="nv">all-neighbors</span> <span class="nv">cells</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fringe</span>
</span><span class='line'>  <span class="s">&quot;Finds all cells that are currently dead but could come alive&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set/difference</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nf">interesting-cells</span> <span class="nv">cells</span><span class="p">))</span>
</span><span class='line'>                  <span class="nv">cells</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">come-alive</span>
</span><span class='line'>  <span class="s">&quot;Finds all cells that are currently dead but will come alive&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">== </span><span class="mi">3</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nf">neighbors</span> <span class="nv">%</span> <span class="nv">cells</span><span class="p">))))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">fringe</span> <span class="nv">cells</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;* come-alive&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with no neighbors stays dead</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with one neighbor stays dead</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[</span><span class="nv">top-left</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with two neighbors stays dead</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[</span><span class="nv">top-left</span> <span class="nv">top-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with three neighbors comes alive</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">center</span><span class="p">}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[</span><span class="nv">top-left</span> <span class="nv">top-right</span> <span class="nv">bottom-left</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with four neighbors stays dead</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[</span><span class="nv">top-left</span> <span class="nv">top-right</span> <span class="nv">bottom-left</span> <span class="nv">bottom-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">step</span>
</span><span class='line'>  <span class="s">&quot;Returns the cells that are still alive after or came alive during a single time step&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set/union</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="nv">cells</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">come-alive</span> <span class="nv">cells</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Printing functions</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Have a 21x21 window into the world</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">min-x</span> <span class="mi">-10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max-x</span>  <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">min-y</span> <span class="mi">-10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max-y</span>  <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">print-cell</span> <span class="p">[</span><span class="nv">cell</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="nv">cell</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print </span><span class="s">&quot;X&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print </span><span class="s">&quot; &quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">print-row</span> <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dorun </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x</span> <span class="p">(</span><span class="nb">range </span><span class="nv">min-x</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">max-x</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">print-cell</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="p">(</span><span class="nf">%</span> <span class="ss">:x</span><span class="p">))</span> <span class="nv">cells</span><span class="p">)))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">println</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">print-cells</span> <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;---&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dorun </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">y</span> <span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">range </span><span class="nv">min-y</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">max-y</span><span class="p">)))]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">print-row</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="nv">y</span> <span class="p">(</span><span class="nf">%</span> <span class="ss">:y</span><span class="p">))</span> <span class="nv">cells</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;---&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Two mildly-interesting start states</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">blinker</span> <span class="p">[{</span><span class="ss">:x</span> <span class="mi">-1</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">glider</span> <span class="p">[{</span><span class="ss">:x</span> <span class="mi">2</span> <span class="ss">:y</span> <span class="mi">2</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">2</span> <span class="ss">:y</span> <span class="mi">1</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">2</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span> <span class="ss">:y</span> <span class="mi">1</span><span class="p">}])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">initial-state</span> <span class="nv">glider</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">life</span> <span class="p">(</span><span class="nb">iterate </span><span class="nv">step</span> <span class="nv">initial-state</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">i</span> <span class="mi">50</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">print-cells</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">life</span> <span class="nv">i</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
