<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: marshal | Jake Goulding]]></title>
  <link href="http://jakegoulding.com/blog/categories/marshal/atom.xml" rel="self"/>
  <link href="http://jakegoulding.com/"/>
  <updated>2016-01-17T14:35:08-05:00</updated>
  <id>http://jakegoulding.com/</id>
  <author>
    <name><![CDATA[Jake Goulding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A final dip into Ruby's Marshal format]]></title>
    <link href="http://jakegoulding.com/blog/2013/01/20/a-final-dip-into-rubys-marshal-format/"/>
    <updated>2013-01-20T20:30:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2013/01/20/a-final-dip-into-rubys-marshal-format</id>
    <content type="html"><![CDATA[<p>This is the third and last of my posts about the Marshal format. The
<a href="http://jakegoulding.com/blog/2013/01/15/a-little-dip-into-rubys-marshal-format/">first part</a> introduced the format and some straight-forward
serializations. The <a href="http://jakegoulding.com/blog/2013/01/16/another-dip-into-rubys-marshal-format/">second part</a> touched on strings and
object links. This post rounds us off with regexes, classes, modules,
and instances of objects.</p>

<!-- more -->


<h2>Regexes</h2>

<p><code>/hello/</code>
<div class='bogus-wrapper'><notextile><pre>0408 49<span style='color: red'>2</span><span style='color: red'>f</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>a</span><span style='color: #CC0'>6</span><span style='color: #CC0'>8</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>5</span><span style='color: #CC0'>6</span><span style='color: #CC0'>c</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>c</span><span style='color: #CC0'>6</span><span style='color: #CC0'>f</span> <span style='color: #0C0'>0</span><span style='color: #0C0'>0</span>06 3a06 4546</pre></notextile></div></p>

<p>Like strings, regexes are surrounded by an IVAR. The typecode <code>2f</code> is
ASCII <code>/</code> and denotes that this object is a regex. The length of the
string follows, again encoded as an integer. The regex string is
stored as a set of bytes, and must be interpreted with the string
encoding from the IVAR. After the string, the regex options are saved.</p>

<p><code>/hello/imx</code>
<div class='bogus-wrapper'><notextile><pre>0408 492f 0a68 656c 6c6f <span style='color: #0C0'>0</span><span style='color: #0C0'>7</span>06 3a06 4546</pre></notextile></div></p>

<p>The regex option byte is a bitset of the five possible options. In
this example, ignore case, extend, and multiline are set (<code>0x1</code>,
<code>0x2</code>, and <code>0x4</code> respectively)</p>

<h2>Classes</h2>

<p><code>String</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>6</span><span style='color: red'>3</span><span style='color: #8FF'>0</span><span style='color: #8FF'>b</span> <span style='color: #CC0'>5</span><span style='color: #CC0'>3</span><span style='color: #CC0'>7</span><span style='color: #CC0'>4</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>2</span><span style='color: #CC0'>6</span><span style='color: #CC0'>9</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>e</span><span style='color: #CC0'>6</span><span style='color: #CC0'>7</span></pre></notextile></div></p>

<p>The typecode <code>63</code> is ASCII <code>c</code> and denotes that this object is a
class. The length of the class name followed by the class name are
next.</p>

<p><code>Math::DomainError</code>
<div class='bogus-wrapper'><notextile><pre>0408 63<span style='color: #8FF'>1</span><span style='color: #8FF'>6</span> <span style='color: #CC0'>4</span><span style='color: #CC0'>d</span><span style='color: #CC0'>6</span><span style='color: #CC0'>1</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>4</span><span style='color: #CC0'>6</span><span style='color: #CC0'>8</span> <span style='color: #CC0'>3</span><span style='color: #CC0'>a</span><span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>4</span><span style='color: #CC0'>4</span><span style='color: #CC0'>6</span><span style='color: #CC0'>f</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>d</span><span style='color: #CC0'>6</span><span style='color: #CC0'>1</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>9</span><span style='color: #CC0'>6</span><span style='color: #CC0'>e</span> <span style='color: #CC0'>4</span><span style='color: #CC0'>5</span><span style='color: #CC0'>7</span><span style='color: #CC0'>2</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>2</span><span style='color: #CC0'>6</span><span style='color: #CC0'>f</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>2</span></pre></notextile></div></p>

<p>Namespaces are separated by <code>::</code>.</p>

<h2>Modules</h2>

<p><code>Enumerable</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>6</span><span style='color: red'>d</span><span style='color: #8FF'>0</span><span style='color: #8FF'>f</span> <span style='color: #CC0'>4</span><span style='color: #CC0'>5</span><span style='color: #CC0'>6</span><span style='color: #CC0'>e</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>5</span><span style='color: #CC0'>6</span><span style='color: #CC0'>d</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>5</span><span style='color: #CC0'>7</span><span style='color: #CC0'>2</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>1</span><span style='color: #CC0'>6</span><span style='color: #CC0'>2</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>c</span><span style='color: #CC0'>6</span><span style='color: #CC0'>5</span></pre></notextile></div></p>

<p>Modules are identical to classes, except the typecode <code>6d</code> is ASCII <code>m</code>.</p>

<h2>Instances of user objects</h2>

<p>Let&rsquo;s define a small class to test with.</p>

<p>```ruby
class DumpTest
  def initialize(a)</p>

<pre><code>@a = a
</code></pre>

<p>  end
end
```</p>

<p><code>DumpTest.new(nil)</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>6</span><span style='color: red'>f</span><span style='color: #8FF'>3</span><span style='color: #8FF'>a</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>d</span><span style='color: #8FF'>4</span><span style='color: #8FF'>4</span> <span style='color: #8FF'>7</span><span style='color: #8FF'>5</span><span style='color: #8FF'>6</span><span style='color: #8FF'>d</span> <span style='color: #8FF'>7</span><span style='color: #8FF'>0</span><span style='color: #8FF'>5</span><span style='color: #8FF'>4</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>5</span><span style='color: #8FF'>7</span><span style='color: #8FF'>3</span> <span style='color: #8FF'>7</span><span style='color: #8FF'>4</span><span style='color: #CC0'>0</span><span style='color: #CC0'>6</span> <span style='color: #0C0'>3</span><span style='color: #0C0'>a</span><span style='color: #0C0'>0</span><span style='color: #0C0'>7</span> <span style='color: #0C0'>4</span><span style='color: #0C0'>0</span><span style='color: #0C0'>6</span><span style='color: #0C0'>1</span> <span style='color: #F80'>3</span><span style='color: #F80'>0</span></pre></notextile></div></p>

<p>The typecode <code>6f</code> is ASCII <code>o</code>, and denotes that this is an
object. The class name is next, written as a symbol &ndash; <code>:DumpTest</code>. The
number of instance variables is encoded as an integer, followed by
pairs of name, value. This example has 1 pair of instance variables,
[<code>:@a</code>, <code>nil</code>].</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another dip into Ruby's Marshal format]]></title>
    <link href="http://jakegoulding.com/blog/2013/01/16/another-dip-into-rubys-marshal-format/"/>
    <updated>2013-01-16T20:00:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2013/01/16/another-dip-into-rubys-marshal-format</id>
    <content type="html"><![CDATA[<p>In a <a href="http://jakegoulding.com/blog/2013/01/15/a-little-dip-into-rubys-marshal-format/">previous post</a> I started to describe some details of
Ruby&rsquo;s Marshal format. This post goes further: a larger set of
integers, IVARs, strings, and object links.</p>

<!-- more -->


<h2>Larger integers</h2>

<p>What happens once we go beyond integer values that can be represented
in one byte? Marshal simply writes the number of bytes needed to
represent the value, followed by the value, least significant byte
first. Leading zeroes are not encoded.</p>

<p><code>123</code>
<div class='bogus-wrapper'><notextile><pre>0408 69<span style='color: #8FF'>0</span><span style='color: #8FF'>1</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>b</span></pre></notextile></div></p>

<p><code>01</code> indicates that the value takes up one byte, followed by the value
itself.</p>

<p><code>256</code>
<div class='bogus-wrapper'><notextile><pre>0408 69<span style='color: #8FF'>0</span><span style='color: #8FF'>2</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>1</span></pre></notextile></div></p>

<p>256 requires two bytes.</p>

<p><code>2**30 - 1</code>
<div class='bogus-wrapper'><notextile><pre>0408 69<span style='color: #8FF'>0</span><span style='color: #8FF'>4</span> <span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>f</span> <span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>3</span><span style='color: #CC0'>f</span></pre></notextile></div></p>

<p>This is the largest value you can serialize as an integer. Above this,
Marshal starts serializing integers as a &ldquo;bignum&rdquo;.</p>

<h2>Negative integers</h2>

<p><code>-1</code>
<div class='bogus-wrapper'><notextile><pre>0408 69<span style='color: #8FF'>f</span><span style='color: #8FF'>a</span></pre></notextile></div></p>

<p><code>fa</code> is -6 in two&rsquo;s complement, which mirrors how <code>1</code> is encoded as 6.</p>

<p><code>-124</code>
<div class='bogus-wrapper'><notextile><pre>0408 69<span style='color: #8FF'>f</span><span style='color: #8FF'>f</span> <span style='color: #CC0'>8</span><span style='color: #CC0'>4</span></pre></notextile></div></p>

<p>Here the first byte is -1 in two&rsquo;s complement. This indicates that one
byte of value follows. The value has had leading <code>FF</code> bytes removed,
similar to large positive integers.</p>

<p><code>-257</code>
<div class='bogus-wrapper'><notextile><pre>0408 69<span style='color: #8FF'>f</span><span style='color: #8FF'>e</span> <span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>e</span></pre></notextile></div></p>

<p>-257 requires two bytes.</p>

<p><code>-(2**30)</code>
<div class='bogus-wrapper'><notextile><pre>0408 69<span style='color: #8FF'>f</span><span style='color: #8FF'>c</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>0</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>c</span><span style='color: #CC0'>0</span></pre></notextile></div></p>

<p>This is the largest negative value you can serialize as an integer
before becoming a bignum.</p>

<h2>IVARs</h2>

<p>Hang on to your seats, we&rsquo;re going to jump into strings. First,
however, we need to talk about IVARs. The crucial thing that IVARs
bring to the table is the handling of string encodings.</p>

<p><code>'hello'</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>4</span><span style='color: red'>9</span>22 0a68 656c 6c6f <span style='color: #8FF'>0</span><span style='color: #8FF'>6</span><span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>6</span><span style='color: #CC0'>4</span><span style='color: #CC0'>5</span> <span style='color: #0C0'>5</span><span style='color: #0C0'>4</span></pre></notextile></div></p>

<p>The typecode <code>49</code> is ASCII <code>I</code> and denotes that this object contains
instance variables. After all the object data, the number of instance
variables is provided. The first instance variable is a special one &ndash;
it&rsquo;s the string encoding of the object. In this example the string
encoding is UTF-8, denoted by the symbol <code>:E</code> followed by a <code>true</code>.</p>

<p><code>'hello'.force_encoding('US-ASCII')</code>
<div class='bogus-wrapper'><notextile><pre>0408 4922 0a68 656c 6c6f 06<span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>6</span><span style='color: #CC0'>4</span><span style='color: #CC0'>5</span> <span style='color: #0C0'>4</span><span style='color: #0C0'>6</span></pre></notextile></div></p>

<p>To represent US-ASCII, <code>:E</code> <code>false</code> is used instead. Both US-ASCII and
UTF-8 are common enough string encodings that special indicators were
created for them.</p>

<p><code>'hello'.force_encoding('SHIFT_JIS')</code>
<div class='bogus-wrapper'><notextile><pre>0408 4922 0a68 656c 6c6f 06<span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>d</span><span style='color: #CC0'>6</span><span style='color: #CC0'>5</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>e</span><span style='color: #CC0'>6</span><span style='color: #CC0'>3</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>f</span><span style='color: #CC0'>6</span><span style='color: #CC0'>4</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>9</span><span style='color: #CC0'>6</span><span style='color: #CC0'>e</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>7</span><span style='color: #0C0'>2</span><span style='color: #0C0'>2</span> <span style='color: #0C0'>0</span><span style='color: #0C0'>e</span><span style='color: #0C0'>5</span><span style='color: #0C0'>3</span> <span style='color: #0C0'>6</span><span style='color: #0C0'>8</span><span style='color: #0C0'>6</span><span style='color: #0C0'>9</span> <span style='color: #0C0'>6</span><span style='color: #0C0'>6</span><span style='color: #0C0'>7</span><span style='color: #0C0'>4</span> <span style='color: #0C0'>5</span><span style='color: #0C0'>f</span><span style='color: #0C0'>4</span><span style='color: #0C0'>a</span> <span style='color: #0C0'>4</span><span style='color: #0C0'>9</span><span style='color: #0C0'>5</span><span style='color: #0C0'>3</span></pre></notextile></div></p>

<p>For any other string encoding, the symbol <code>:encoding</code> is used and the
full string encoding is written out as a raw string &ndash; <code>"SHIFT_JIS"</code>.</p>

<p><code>'hello'.tap {|s| s.instance_variable_set(:@test, nil)}</code>
<div class='bogus-wrapper'><notextile><pre>0408 4922 0a68 656c 6c6f <span style='color: #8FF'>0</span><span style='color: #8FF'>7</span>3a 0645 54<span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>a</span><span style='color: #CC0'>4</span><span style='color: #CC0'>0</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>4</span><span style='color: #CC0'>6</span><span style='color: #CC0'>5</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>3</span><span style='color: #CC0'>7</span><span style='color: #CC0'>4</span> <span style='color: #0C0'>3</span><span style='color: #0C0'>0</span></pre></notextile></div></p>

<p>Additional instance variables follow the string encoding. There are
now 2 instance variables. The symbol for the instance variable name
<code>:@test</code> comes before the value, <code>nil</code>.</p>

<h2>Raw strings</h2>

<p><code>'hello'</code>
<div class='bogus-wrapper'><notextile><pre>0408 49<span style='color: red'>2</span><span style='color: red'>2</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>a</span><span style='color: #CC0'>6</span><span style='color: #CC0'>8</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>5</span><span style='color: #CC0'>6</span><span style='color: #CC0'>c</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>c</span><span style='color: #CC0'>6</span><span style='color: #CC0'>f</span> 063a 0645 54</pre></notextile></div></p>

<p>Raw strings are safely nestled inside an IVAR, and are comparatively
very simple. The typecode <code>22</code> is ASCII <code>"</code> and denotes that this
object is a raw string. The length of the string data is next, encoded in
the same form as integers. The string data follows as a set of
bytes. These bytes must be interpreted using the encoding from the
surrounding IVAR.</p>

<h2>Object links</h2>

<p>When the same object instance is repeated multiple times, the Marshal
encoding allows subsequent instances to reference the first instance
to save space in the stream.</p>

<p><code>a = 'hello'; [a, a]</code>
<div class='bogus-wrapper'><notextile><pre>0408 5b07 <span style='color: #8FF'>4</span><span style='color: #8FF'>9</span><span style='color: #8FF'>2</span><span style='color: #8FF'>2</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>a</span><span style='color: #8FF'>6</span><span style='color: #8FF'>8</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>5</span><span style='color: #8FF'>6</span><span style='color: #8FF'>c</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>c</span><span style='color: #8FF'>6</span><span style='color: #8FF'>f</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>6</span><span style='color: #8FF'>3</span><span style='color: #8FF'>a</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>6</span><span style='color: #8FF'>4</span><span style='color: #8FF'>5</span> <span style='color: #8FF'>5</span><span style='color: #8FF'>4</span><span style='color: red'>4</span><span style='color: red'>0</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>6</span></pre></notextile></div></p>

<p>The typecode <code>40</code> is ASCII <code>@</code>. The typecode is followed by the
position of the object in the cache table. This cache table is
distinct from the symbol cache.</p>

<h2>The rest</h2>

<p>There&rsquo;s a more types that Marshal can handle, but not all of them are
interesting. The <a href="http://jakegoulding.com/blog/2013/01/20/a-final-dip-into-rubys-marshal-format/">next post</a> covers regexes, classes, modules,
and instances of objects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A little dip into Ruby's Marshal format]]></title>
    <link href="http://jakegoulding.com/blog/2013/01/15/a-little-dip-into-rubys-marshal-format/"/>
    <updated>2013-01-15T20:00:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2013/01/15/a-little-dip-into-rubys-marshal-format</id>
    <content type="html"><![CDATA[<p>I recently tried to resolve a JRuby <a href="https://github.com/jruby/jruby/issues/456">issue involving Marshal</a>.
I&rsquo;ve used <a href="http://www.ruby-doc.org/core-1.9.3/Marshal.html">Marshal</a> before, but never needed to pay attention
to the actual bytes written to disk. I decided to write up what I
learned in the process.</p>

<!-- more -->


<h2>Version number</h2>

<p><div class='bogus-wrapper'><notextile><pre><span style='color: red'>0</span><span style='color: red'>4</span><span style='color: #8FF'>0</span><span style='color: #8FF'>8</span></pre></notextile></div></p>

<p>I collected this data using Ruby 1.9.3p327, which has Marshal version
4.8. The version number is encoded with two bytes, one each for the
major and minor version. This version number precedes all dumps and
I&rsquo;ll ignore it for the rest of this post.</p>

<h2>Nil, true, false</h2>

<p><code>nil</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>3</span><span style='color: red'>0</span></pre></notextile></div>
The typecode <code>30</code> is ASCII <code>0</code>.</p>

<p><code>true</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>5</span><span style='color: red'>4</span></pre></notextile></div>
The typecode <code>54</code> is ASCII <code>T</code>.</p>

<p><code>false</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>4</span><span style='color: red'>6</span></pre></notextile></div>
The typecode <code>46</code> is ASCII <code>F</code>.</p>

<h2>Integers (easy)</h2>

<p><code>0</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>6</span><span style='color: red'>9</span><span style='color: #8FF'>0</span><span style='color: #8FF'>0</span></pre></notextile></div></p>

<p>The typecode <code>69</code> is ASCII <code>i</code>. The typecode is followed by the value
of the integer. Zero is represented as <code>00</code>.</p>

<p><code>1</code>
<div class='bogus-wrapper'><notextile><pre>0408 69<span style='color: #8FF'>0</span><span style='color: #8FF'>6</span></pre></notextile></div></p>

<p>Here we see that the encoded value for one is <code>06</code>, not <code>01</code> as we
might expect at first. This allows for more efficient storage of
smaller numbers. -123 &lt;= x &lt;= 122 can be encoded in just one byte.</p>

<h2>Arrays</h2>

<p><code>[]</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>5</span><span style='color: red'>b</span><span style='color: #8FF'>0</span><span style='color: #8FF'>0</span></pre></notextile></div></p>

<p>The typecode <code>5b</code> is ASCII <code>[</code>. The typecode is followed by the
number of elements in the array.</p>

<p><code>[1]</code>
<div class='bogus-wrapper'><notextile><pre>0408 5b<span style='color: #8FF'>0</span><span style='color: #8FF'>6</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>9</span><span style='color: #CC0'>0</span><span style='color: #CC0'>6</span></pre></notextile></div></p>

<p>The number of items in the array is encoded in the same form as
integers. Each value in the array is encoded sequentially after the
size of the array.</p>

<h2>Hashes</h2>

<p><code>{}</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>7</span><span style='color: red'>b</span><span style='color: #8FF'>0</span><span style='color: #8FF'>0</span></pre></notextile></div>
The typecode <code>7b</code> is ASCII <code>{</code>. The typecode is followed by the number
of (key, value) pairs in the hash.</p>

<p><code>{1 =&gt; 2}</code>
<div class='bogus-wrapper'><notextile><pre>0408 7b<span style='color: #8FF'>0</span><span style='color: #8FF'>6</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>9</span><span style='color: #CC0'>0</span><span style='color: #CC0'>6</span> <span style='color: #0C0'>6</span><span style='color: #0C0'>9</span><span style='color: #0C0'>0</span><span style='color: #0C0'>7</span></pre></notextile></div></p>

<p>Like arrays, the number of items in the hash is encoded in the same
form as integers. Each pair of (key, value) is encoded sequentially
after the size of the hash.</p>

<h2>Symbols</h2>

<p><code>:hello</code>
<div class='bogus-wrapper'><notextile><pre>0408 <span style='color: red'>3</span><span style='color: red'>a</span><span style='color: #8FF'>0</span><span style='color: #8FF'>a</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>8</span><span style='color: #CC0'>6</span><span style='color: #CC0'>5</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>c</span><span style='color: #CC0'>6</span><span style='color: #CC0'>c</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>f</span></pre></notextile></div></p>

<p>The typecode <code>3a</code> is ASCII <code>:</code>. The typecode is followed by the length
of the symbol name and then the symbol name itself, encoded as UTF-8.</p>

<h2>Symlinks</h2>

<p>When a symbol is repeated multiple times, the Marshal encoding allows
subsequent instances to reference the first instance to save space in
the stream.</p>

<p><code>[:hello, :hello]</code>
<div class='bogus-wrapper'><notextile><pre>0408 5b07 <span style='color: #8FF'>3</span><span style='color: #8FF'>a</span><span style='color: #8FF'>0</span><span style='color: #8FF'>a</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>8</span><span style='color: #8FF'>6</span><span style='color: #8FF'>5</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>c</span><span style='color: #8FF'>6</span><span style='color: #8FF'>c</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>f</span><span style='color: red'>3</span><span style='color: red'>b</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>0</span></pre></notextile></div></p>

<p>The typecode <code>3b</code> is ASCII <code>;</code>.  The typecode is followed by the
position of the symbol in the cache table. This table is indexed by
the order in which the symbol first appeared.</p>

<h2>The rest</h2>

<p>There&rsquo;s a lot more to the Marshal format; I haven&rsquo;t even covered
strings yet! You can find more at the <a href="http://jakegoulding.com/blog/2013/01/16/another-dip-into-rubys-marshal-format/">next post</a> in this
series, or jump right to the <a href="http://jakegoulding.com/blog/2013/01/20/a-final-dip-into-rubys-marshal-format/">last post</a>.</p>

<h2>How to explore on your own</h2>

<p>To generate the examples for this post, I hacked up a quick helper in
irb:</p>

<p><code>ruby
def dump(x)
  File.open('/tmp/out', 'w') {|f| Marshal.dump(x, f)}
  `xxd /tmp/out`
end
</code></p>
]]></content>
  </entry>
  
</feed>
