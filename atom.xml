<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake Goulding]]></title>
  <link href="http://jakegoulding.com/atom.xml" rel="self"/>
  <link href="http://jakegoulding.com/"/>
  <updated>2013-01-20T20:23:21-05:00</updated>
  <id>http://jakegoulding.com/</id>
  <author>
    <name><![CDATA[Jake Goulding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A final dip into Ruby's Marshal format]]></title>
    <link href="http://jakegoulding.com/blog/2013/01/20/a-final-dip-into-rubys-marshal-format/"/>
    <updated>2013-01-20T20:30:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2013/01/20/a-final-dip-into-rubys-marshal-format</id>
    <content type="html"><![CDATA[<p>This is the third and last of my posts about the Marshal format. The
<a href="http://jakegoulding.com/blog/2013/01/15/a-little-dip-into-rubys-marshal-format/">first part</a> introduced the format and some straight-forward
serializations. The <a href="http://jakegoulding.com/blog/2013/01/16/another-dip-into-rubys-marshal-format/">second part</a> touched on strings and
object links. This post rounds us off with regexes, classes, modules,
and instances of objects.</p>

<!-- more -->


<h2>Regexes</h2>

<p><code>/hello/</code></p>

<pre>0408 49<span style='color: red'>2</span><span style='color: red'>f</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>a</span><span style='color: #CC0'>6</span><span style='color: #CC0'>8</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>5</span><span style='color: #CC0'>6</span><span style='color: #CC0'>c</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>c</span><span style='color: #CC0'>6</span><span style='color: #CC0'>f</span> <span style='color: #0C0'>0</span><span style='color: #0C0'>0</span>06 3a06 4546</pre>


<p>Like strings, regexes are surrounded by an IVAR. The typecode <code>2f</code> is
ASCII <code>/</code> and denotes that this object is a regex. The length of the
string follows, again encoded as an integer. The regex string is
stored as a set of bytes, and must be interpreted with the string
encoding from the IVAR. After the string, the regex options are saved.</p>

<p><code>/hello/imx</code></p>

<pre>0408 492f 0a68 656c 6c6f <span style='color: #0C0'>0</span><span style='color: #0C0'>7</span>06 3a06 4546</pre>


<p>The regex option byte is a bitset of the five possible options. In
this example, ignore case, extend, and multiline are set (<code>0x1</code>,
<code>0x2</code>, and <code>0x4</code> respectively)</p>

<h2>Classes</h2>

<p><code>String</code></p>

<pre>0408 <span style='color: red'>6</span><span style='color: red'>3</span><span style='color: #8FF'>0</span><span style='color: #8FF'>b</span> <span style='color: #CC0'>5</span><span style='color: #CC0'>3</span><span style='color: #CC0'>7</span><span style='color: #CC0'>4</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>2</span><span style='color: #CC0'>6</span><span style='color: #CC0'>9</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>e</span><span style='color: #CC0'>6</span><span style='color: #CC0'>7</span></pre>


<p>The typecode <code>63</code> is ASCII <code>c</code> and denotes that this object is a
class. The length of the class name followed by the class name are
next.</p>

<p><code>Math::DomainError</code></p>

<pre>0408 63<span style='color: #8FF'>1</span><span style='color: #8FF'>6</span> <span style='color: #CC0'>4</span><span style='color: #CC0'>d</span><span style='color: #CC0'>6</span><span style='color: #CC0'>1</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>4</span><span style='color: #CC0'>6</span><span style='color: #CC0'>8</span> <span style='color: #CC0'>3</span><span style='color: #CC0'>a</span><span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>4</span><span style='color: #CC0'>4</span><span style='color: #CC0'>6</span><span style='color: #CC0'>f</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>d</span><span style='color: #CC0'>6</span><span style='color: #CC0'>1</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>9</span><span style='color: #CC0'>6</span><span style='color: #CC0'>e</span> <span style='color: #CC0'>4</span><span style='color: #CC0'>5</span><span style='color: #CC0'>7</span><span style='color: #CC0'>2</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>2</span><span style='color: #CC0'>6</span><span style='color: #CC0'>f</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>2</span></pre>


<p>Namespaces are separated by <code>::</code>.</p>

<h2>Modules</h2>

<p><code>Enumerable</code></p>

<pre>0408 <span style='color: red'>6</span><span style='color: red'>d</span><span style='color: #8FF'>0</span><span style='color: #8FF'>f</span> <span style='color: #CC0'>4</span><span style='color: #CC0'>5</span><span style='color: #CC0'>6</span><span style='color: #CC0'>e</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>5</span><span style='color: #CC0'>6</span><span style='color: #CC0'>d</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>5</span><span style='color: #CC0'>7</span><span style='color: #CC0'>2</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>1</span><span style='color: #CC0'>6</span><span style='color: #CC0'>2</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>c</span><span style='color: #CC0'>6</span><span style='color: #CC0'>5</span></pre>


<p>Modules are identical to classes, except the typecode <code>6d</code> is ASCII <code>m</code>.</p>

<h2>Instances of user objects</h2>

<p>Let&#8217;s define a small class to test with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DumpTest</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@a</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>DumpTest.new(nil)</code></p>

<pre>0408 <span style='color: red'>6</span><span style='color: red'>f</span><span style='color: #8FF'>3</span><span style='color: #8FF'>a</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>d</span><span style='color: #8FF'>4</span><span style='color: #8FF'>4</span> <span style='color: #8FF'>7</span><span style='color: #8FF'>5</span><span style='color: #8FF'>6</span><span style='color: #8FF'>d</span> <span style='color: #8FF'>7</span><span style='color: #8FF'>0</span><span style='color: #8FF'>5</span><span style='color: #8FF'>4</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>5</span><span style='color: #8FF'>7</span><span style='color: #8FF'>3</span> <span style='color: #8FF'>7</span><span style='color: #8FF'>4</span><span style='color: #CC0'>0</span><span style='color: #CC0'>6</span> <span style='color: #0C0'>3</span><span style='color: #0C0'>a</span><span style='color: #0C0'>0</span><span style='color: #0C0'>7</span> <span style='color: #0C0'>4</span><span style='color: #0C0'>0</span><span style='color: #0C0'>6</span><span style='color: #0C0'>1</span> <span style='color: #F80'>3</span><span style='color: #F80'>0</span></pre>


<p>The typecode <code>6f</code> is ASCII <code>o</code>, and denotes that this is an
object. The class name is next, written as a symbol - <code>:DumpTest</code>. The
number of instance variables is encoded as an integer, followed by
pairs of name, value. This example has 1 pair of instance variables,
[<code>:@a</code>, <code>nil</code>].</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another dip into Ruby's Marshal format]]></title>
    <link href="http://jakegoulding.com/blog/2013/01/16/another-dip-into-rubys-marshal-format/"/>
    <updated>2013-01-16T20:00:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2013/01/16/another-dip-into-rubys-marshal-format</id>
    <content type="html"><![CDATA[<p>In a <a href="http://jakegoulding.com/blog/2013/01/15/a-little-dip-into-rubys-marshal-format/">previous post</a> I started to describe some details of
Ruby&#8217;s Marshal format. This post goes further: a larger set of
integers, IVARs, strings, and object links.</p>

<!-- more -->


<h2>Larger integers</h2>

<p>What happens once we go beyond integer values that can be represented
in one byte? Marshal simply writes the number of bytes needed to
represent the value, followed by the value, least significant byte
first. Leading zeroes are not encoded.</p>

<p><code>123</code></p>

<pre>0408 69<span style='color: #8FF'>0</span><span style='color: #8FF'>1</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>b</span></pre>


<p><code>01</code> indicates that the value takes up one byte, followed by the value
itself.</p>

<p><code>256</code></p>

<pre>0408 69<span style='color: #8FF'>0</span><span style='color: #8FF'>2</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>1</span></pre>


<p>256 requires two bytes.</p>

<p><code>2**30 - 1</code></p>

<pre>0408 69<span style='color: #8FF'>0</span><span style='color: #8FF'>4</span> <span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>f</span> <span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>3</span><span style='color: #CC0'>f</span></pre>


<p>This is the largest value you can serialize as an integer. Above this,
Marshal starts serializing integers as a &#8220;bignum&#8221;.</p>

<h2>Negative integers</h2>

<p><code>-1</code></p>

<pre>0408 69<span style='color: #8FF'>f</span><span style='color: #8FF'>a</span></pre>


<p><code>fa</code> is -6 in two&#8217;s complement, which mirrors how <code>1</code> is encoded as 6.</p>

<p><code>-124</code></p>

<pre>0408 69<span style='color: #8FF'>f</span><span style='color: #8FF'>f</span> <span style='color: #CC0'>8</span><span style='color: #CC0'>4</span></pre>


<p>Here the first byte is -1 in two&#8217;s complement. This indicates that one
byte of value follows. The value has had leading <code>FF</code> bytes removed,
similar to large positive integers.</p>

<p><code>-257</code></p>

<pre>0408 69<span style='color: #8FF'>f</span><span style='color: #8FF'>e</span> <span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>f</span><span style='color: #CC0'>e</span></pre>


<p>-257 requires two bytes.</p>

<p><code>-(2**30)</code></p>

<pre>0408 69<span style='color: #8FF'>f</span><span style='color: #8FF'>c</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>0</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>0</span><span style='color: #CC0'>c</span><span style='color: #CC0'>0</span></pre>


<p>This is the largest negative value you can serialize as an integer
before becoming a bignum.</p>

<h2>IVARs</h2>

<p>Hang on to your seats, we&#8217;re going to jump into strings. First,
however, we need to talk about IVARs. The crucial thing that IVARs
bring to the table is the handling of string encodings.</p>

<p><code>'hello'</code></p>

<pre>0408 <span style='color: red'>4</span><span style='color: red'>9</span>22 0a68 656c 6c6f <span style='color: #8FF'>0</span><span style='color: #8FF'>6</span><span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>6</span><span style='color: #CC0'>4</span><span style='color: #CC0'>5</span> <span style='color: #0C0'>5</span><span style='color: #0C0'>4</span></pre>


<p>The typecode <code>49</code> is ASCII <code>I</code> and denotes that this object contains
instance variables. After all the object data, the number of instance
variables is provided. The first instance variable is a special one -
it&#8217;s the string encoding of the object. In this example the string
encoding is UTF-8, denoted by the symbol <code>:E</code> followed by a <code>true</code>.</p>

<p><code>'hello'.force_encoding('US-ASCII')</code></p>

<pre>0408 4922 0a68 656c 6c6f 06<span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>6</span><span style='color: #CC0'>4</span><span style='color: #CC0'>5</span> <span style='color: #0C0'>4</span><span style='color: #0C0'>6</span></pre>


<p>To represent US-ASCII, <code>:E</code> <code>false</code> is used instead. Both US-ASCII and
UTF-8 are common enough string encodings that special indicators were
created for them.</p>

<p><code>'hello'.force_encoding('SHIFT_JIS')</code></p>

<pre>0408 4922 0a68 656c 6c6f 06<span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>d</span><span style='color: #CC0'>6</span><span style='color: #CC0'>5</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>e</span><span style='color: #CC0'>6</span><span style='color: #CC0'>3</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>f</span><span style='color: #CC0'>6</span><span style='color: #CC0'>4</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>9</span><span style='color: #CC0'>6</span><span style='color: #CC0'>e</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>7</span><span style='color: #0C0'>2</span><span style='color: #0C0'>2</span> <span style='color: #0C0'>0</span><span style='color: #0C0'>e</span><span style='color: #0C0'>5</span><span style='color: #0C0'>3</span> <span style='color: #0C0'>6</span><span style='color: #0C0'>8</span><span style='color: #0C0'>6</span><span style='color: #0C0'>9</span> <span style='color: #0C0'>6</span><span style='color: #0C0'>6</span><span style='color: #0C0'>7</span><span style='color: #0C0'>4</span> <span style='color: #0C0'>5</span><span style='color: #0C0'>f</span><span style='color: #0C0'>4</span><span style='color: #0C0'>a</span> <span style='color: #0C0'>4</span><span style='color: #0C0'>9</span><span style='color: #0C0'>5</span><span style='color: #0C0'>3</span></pre>


<p>For any other string encoding, the symbol <code>:encoding</code> is used and the
full string encoding is written out as a raw string - <code>"SHIFT_JIS"</code>.</p>

<p><code>'hello'.tap {|s| s.instance_variable_set(:@test, nil)}</code></p>

<pre>0408 4922 0a68 656c 6c6f <span style='color: #8FF'>0</span><span style='color: #8FF'>7</span>3a 0645 54<span style='color: #CC0'>3</span><span style='color: #CC0'>a</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>a</span><span style='color: #CC0'>4</span><span style='color: #CC0'>0</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>4</span><span style='color: #CC0'>6</span><span style='color: #CC0'>5</span> <span style='color: #CC0'>7</span><span style='color: #CC0'>3</span><span style='color: #CC0'>7</span><span style='color: #CC0'>4</span> <span style='color: #0C0'>3</span><span style='color: #0C0'>0</span></pre>


<p>Additional instance variables follow the string encoding. There are
now 2 instance variables. The symbol for the instance variable name
<code>:@test</code> comes before the value, <code>nil</code>.</p>

<h2>Raw strings</h2>

<p><code>'hello'</code></p>

<pre>0408 49<span style='color: red'>2</span><span style='color: red'>2</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>a</span><span style='color: #CC0'>6</span><span style='color: #CC0'>8</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>5</span><span style='color: #CC0'>6</span><span style='color: #CC0'>c</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>c</span><span style='color: #CC0'>6</span><span style='color: #CC0'>f</span> 063a 0645 54</pre>


<p>Raw strings are safely nestled inside an IVAR, and are comparatively
very simple. The typecode <code>22</code> is ASCII <code>"</code> and denotes that this
object is a raw string. The length of the string data is next, encoded in
the same form as integers. The string data follows as a set of
bytes. These bytes must be interpreted using the encoding from the
surrounding IVAR.</p>

<h2>Object links</h2>

<p>When the same object instance is repeated multiple times, the Marshal
encoding allows subsequent instances to reference the first instance
to save space in the stream.</p>

<p><code>a = 'hello'; [a, a]</code></p>

<pre>0408 5b07 <span style='color: #8FF'>4</span><span style='color: #8FF'>9</span><span style='color: #8FF'>2</span><span style='color: #8FF'>2</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>a</span><span style='color: #8FF'>6</span><span style='color: #8FF'>8</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>5</span><span style='color: #8FF'>6</span><span style='color: #8FF'>c</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>c</span><span style='color: #8FF'>6</span><span style='color: #8FF'>f</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>6</span><span style='color: #8FF'>3</span><span style='color: #8FF'>a</span> <span style='color: #8FF'>0</span><span style='color: #8FF'>6</span><span style='color: #8FF'>4</span><span style='color: #8FF'>5</span> <span style='color: #8FF'>5</span><span style='color: #8FF'>4</span><span style='color: red'>4</span><span style='color: red'>0</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>6</span></pre>


<p>The typecode <code>40</code> is ASCII <code>@</code>. The typecode is followed by the
position of the object in the cache table. This cache table is
distinct from the symbol cache.</p>

<h2>The rest</h2>

<p>There&#8217;s a more types that Marshal can handle, but not all of them are
interesting. The <a href="http://jakegoulding.com/blog/2013/01/20/a-final-dip-into-rubys-marshal-format/">next post</a> covers regexes, classes, modules,
and instances of objects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A little dip into Ruby's Marshal format]]></title>
    <link href="http://jakegoulding.com/blog/2013/01/15/a-little-dip-into-rubys-marshal-format/"/>
    <updated>2013-01-15T20:00:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2013/01/15/a-little-dip-into-rubys-marshal-format</id>
    <content type="html"><![CDATA[<p>I recently tried to resolve a JRuby <a href="https://github.com/jruby/jruby/issues/456">issue involving Marshal</a>.
I&#8217;ve used <a href="http://www.ruby-doc.org/core-1.9.3/Marshal.html">Marshal</a> before, but never needed to pay attention
to the actual bytes written to disk. I decided to write up what I
learned in the process.</p>

<!-- more -->


<h2>Version number</h2>

<pre><span style='color: red'>0</span><span style='color: red'>4</span><span style='color: #8FF'>0</span><span style='color: #8FF'>8</span></pre>


<p>I collected this data using Ruby 1.9.3p327, which has Marshal version
4.8. The version number is encoded with two bytes, one each for the
major and minor version. This version number precedes all dumps and
I&#8217;ll ignore it for the rest of this post.</p>

<h2>Nil, true, false</h2>

<p><code>nil</code></p>

<pre>0408 <span style='color: red'>3</span><span style='color: red'>0</span></pre>


<p>The typecode <code>30</code> is ASCII <code>0</code>.</p>

<p><code>true</code></p>

<pre>0408 <span style='color: red'>5</span><span style='color: red'>4</span></pre>


<p>The typecode <code>54</code> is ASCII <code>T</code>.</p>

<p><code>false</code></p>

<pre>0408 <span style='color: red'>4</span><span style='color: red'>6</span></pre>


<p>The typecode <code>46</code> is ASCII <code>F</code>.</p>

<h2>Integers (easy)</h2>

<p><code>0</code></p>

<pre>0408 <span style='color: red'>6</span><span style='color: red'>9</span><span style='color: #8FF'>0</span><span style='color: #8FF'>0</span></pre>


<p>The typecode <code>69</code> is ASCII <code>i</code>. The typecode is followed by the value
of the integer. Zero is represented as <code>00</code>.</p>

<p><code>1</code></p>

<pre>0408 69<span style='color: #8FF'>0</span><span style='color: #8FF'>6</span></pre>


<p>Here we see that the encoded value for one is <code>06</code>, not <code>01</code> as we
might expect at first. This allows for more efficient storage of
smaller numbers. -123 &lt;= x &lt;= 122 can be encoded in just one byte.</p>

<h2>Arrays</h2>

<p><code>[]</code></p>

<pre>0408 <span style='color: red'>5</span><span style='color: red'>b</span><span style='color: #8FF'>0</span><span style='color: #8FF'>0</span></pre>


<p>The typecode <code>5b</code> is ASCII <code>[</code>. The typecode is followed by the
number of elements in the array.</p>

<p><code>[1]</code></p>

<pre>0408 5b<span style='color: #8FF'>0</span><span style='color: #8FF'>6</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>9</span><span style='color: #CC0'>0</span><span style='color: #CC0'>6</span></pre>


<p>The number of items in the array is encoded in the same form as
integers. Each value in the array is encoded sequentially after the
size of the array.</p>

<h2>Hashes</h2>

<p><code>{}</code></p>

<pre>0408 <span style='color: red'>7</span><span style='color: red'>b</span><span style='color: #8FF'>0</span><span style='color: #8FF'>0</span></pre>


<p>The typecode <code>7b</code> is ASCII <code>{</code>. The typecode is followed by the number
of (key, value) pairs in the hash.</p>

<p><code>{1 =&gt; 2}</code></p>

<pre>0408 7b<span style='color: #8FF'>0</span><span style='color: #8FF'>6</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>9</span><span style='color: #CC0'>0</span><span style='color: #CC0'>6</span> <span style='color: #0C0'>6</span><span style='color: #0C0'>9</span><span style='color: #0C0'>0</span><span style='color: #0C0'>7</span></pre>


<p>Like arrays, the number of items in the hash is encoded in the same
form as integers. Each pair of (key, value) is encoded sequentially
after the size of the hash.</p>

<h2>Symbols</h2>

<p><code>:hello</code></p>

<pre>0408 <span style='color: red'>3</span><span style='color: red'>a</span><span style='color: #8FF'>0</span><span style='color: #8FF'>a</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>8</span><span style='color: #CC0'>6</span><span style='color: #CC0'>5</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>c</span><span style='color: #CC0'>6</span><span style='color: #CC0'>c</span> <span style='color: #CC0'>6</span><span style='color: #CC0'>f</span></pre>


<p>The typecode <code>3a</code> is ASCII <code>:</code>. The typecode is followed by the length
of the symbol name and then the symbol name itself, encoded as UTF-8.</p>

<h2>Symlinks</h2>

<p>When a symbol is repeated multiple times, the Marshal encoding allows
subsequent instances to reference the first instance to save space in
the stream.</p>

<p><code>[:hello, :hello]</code></p>

<pre>0408 5b07 <span style='color: #8FF'>3</span><span style='color: #8FF'>a</span><span style='color: #8FF'>0</span><span style='color: #8FF'>a</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>8</span><span style='color: #8FF'>6</span><span style='color: #8FF'>5</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>c</span><span style='color: #8FF'>6</span><span style='color: #8FF'>c</span> <span style='color: #8FF'>6</span><span style='color: #8FF'>f</span><span style='color: red'>3</span><span style='color: red'>b</span> <span style='color: #CC0'>0</span><span style='color: #CC0'>0</span></pre>


<p>The typecode <code>3b</code> is ASCII <code>;</code>.  The typecode is followed by the
position of the symbol in the cache table. This table is indexed by
the order in which the symbol first appeared.</p>

<h2>The rest</h2>

<p>There&#8217;s a lot more to the Marshal format; I haven&#8217;t even covered
strings yet! You can find more at the <a href="http://jakegoulding.com/blog/2013/01/16/another-dip-into-rubys-marshal-format/">next post</a> in this
series, or jump right to the <a href="http://jakegoulding.com/blog/2013/01/20/a-final-dip-into-rubys-marshal-format/">last post</a>.</p>

<h2>How to explore on your own</h2>

<p>To generate the examples for this post, I hacked up a quick helper in
irb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">dump</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;/tmp/out&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">Marshal</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">f</span><span class="p">)}</span>
</span><span class='line'>  <span class="sb">`xxd /tmp/out`</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conway's Game of Life without return values]]></title>
    <link href="http://jakegoulding.com/blog/2012/12/13/conways-game-of-life-without-return-values/"/>
    <updated>2012-12-13T15:14:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2012/12/13/conways-game-of-life-without-return-values</id>
    <content type="html"><![CDATA[<p>On 2012-12-08, I attended the Pittsburgh
<a href="http://globalday.coderetreat.org/">Global Day of Code Retreat</a> facilitated by <a href="https://twitter.com/josephrkramer">Joe Kramer</a>
and <a href="https://twitter.com/jthurne">Jim Hurne</a>. As usual, I had a great time, and got to meet
new people from the Pittsburgh tech scene. It&#8217;s always good for me to
remember that there are non-Ruby developers out there! I even started
the day off by doing the Game of Life in C#.</p>

<p>One of the more contentious constraints of the day was &#8220;no return
values&#8221;. I feel like I was the only one in the room that liked this
constraint at all!  As such, I wanted to finish it up to see what my
<a href="https://github.com/shepmaster/gdcr-no-return-values">final code</a> and observations would look like.</p>

<!-- more -->


<h3>Goal</h3>

<p>As I understand it, the point of this constraint is to explore
&#8221;<a href="http://pragprog.com/articles/tell-dont-ask">tell don&#8217;t ask</a>&#8221;, with a secondary exploration of
<a href="http://martinfowler.com/articles/mocksArentStubs.html">mocks vs. stubs</a>.</p>

<h3>Constraint modifications</h3>

<p>I made some small tweaks to the constraint to deal with how Ruby
works and to avoid work orthogonal to the goal.</p>

<ul>
<li>Allow return values from constructors</li>
<li>Allow return values from standard library classes</li>
<li>Allow return values from private methods</li>
</ul>


<p>In Ruby, constructors are methods on a Class instance that return a
new instance of the class. Since everything in Ruby is an object, it
would be impossible to make progress if we didn&#8217;t allow creating new
objects.</p>

<p>The goal of the constraint isn&#8217;t to rewrite all of Ruby&#8217;s standard
library. If we cannot use return values from the standard library, we
couldn&#8217;t do something as simple as <code>a = 1 + 1</code>! Our newly-created
code will not return values, so it is safe to use return values hidden
away inside of our objects.</p>

<p>Allowing private methods to return values isn&#8217;t strictly necessary,
but it allows us to reduce code duplication. Technically, we could
inline the private methods where they are used, but that would be
ugly. Since these methods are private, they won&#8217;t add to the surface
area of our objects and shouldn&#8217;t conflict with the goal of the
exercise.</p>

<h3>Things I liked</h3>

<p>I usually start out Conway&#8217;s with the ability to see if a cell is
alive, followed quickly by the ability to bring a cell to life. This
means the first thing I do is rely on return values. This time, I
began with the concept of a UI that would be told when a cell is
alive. I found this interesting as I usually skip over the display
completely, leaving it as a &#8220;trivial&#8221; thing to be added later.</p>

<p>The <code>Board</code> class came into existence while implementing the
<code>time_passes</code> method because I needed to have both the current and
next board state. I like that this concept was reified; the <code>Game</code>
class deals with coordinating the rules and a board, but the <code>Board</code>
class deals with the particulars of the board state.</p>

<p>I was forced into giving human names to more things than I usually
would, such as <code>has_two_neighbors</code>, or <code>AliveCellRules</code>. I find that
this is the extended version of creating a well-named temporary
variable.</p>

<h3>Things I didn&#8217;t like</h3>

<p>There are two rule-related classes, one for alive cells and one for
dead cells. The alive cell rules class is almost 100%
duplication. This could be reduced using Ruby&#8217;s <code>alias</code> at the cost of
reduced readability, and still wouldn&#8217;t help the duplication in the
dead cell rules. It&#8217;s hard to tell if this would be good or bad in the
absence of future changes, but I don&#8217;t like it as it stands now.</p>

<p>I wanted to create a <code>Point</code> class to abstract the concept of x / y
coordinates and also to have a place to hang the idea of
&#8220;neighbors&#8221;. Unfortunately, it would have solely existed to return
values: a list of points, equality comparisons, etc. I think this
would be an ideal example of a value type.</p>

<p>I love Ruby&#8217;s <code>Struct</code>; I have written too many class initializers
longhand to ever want to go back. As far as I am concerned, <code>Struct</code>
reduces the work to make an initializer from <em>O(n)</em> to <em>O(1)</em>.
Unfortunately, it automatically creates a public <code>attr_accessor</code>,
which would be too tempting to use. I also avoided <code>attr_reader</code> for
the same reason, even though I could have made the reader
private. Seeing all the bare instance variables makes me
uncomfortable.</p>

<h3>Interesting implementation details</h3>

<p>For each public method, I returned <code>self</code>. In Ruby, the last executed
statement is implicitly returned. Returning <code>self</code> avoids accidentally
relying on a return value. In production code I wouldn&#8217;t go this
overboard, trusting the caller to not use incidental return values. In
a language like Java, I would declare the method as void.</p>

<p>I&#8217;ve never used <code>flat_map</code> before, but I&#8217;m going to keep my eyes open
for more places to use it. I&#8217;m not at the point where it comes without
thinking, but looking for <code>ary.map{ ... }.flatten(1)</code> should be easy
enough. Also, I learned that <code>flatten</code> can take an argument that
controls how deep it will go.</p>

<p>I swear that there is an existing method that does the equivalent of
<code>ary.reject { |x| x == CONSTANT }</code>, but I couldn&#8217;t find it. <code>delete</code>
will mutate the array in place, which isn&#8217;t quite the same.</p>

<h3>Tests</h3>

<p>As the code progressed, I had to start using RSpec&#8217;s <code>as_null_object</code>
more frequently. This is because closely situated cells began
interacting and would be output to the user interface. I wasn&#8217;t
interested in these outputs, but they weren&#8217;t incorrect. After enough
tests needed a null object, I changed the test-wide mock, which may
have been too broad a change.</p>

<p>All of the tests that involve time passing have two duplicated
lines. These lines could have been pulled into the rarely-used <code>after</code>
block. I&#8217;ve never seen code that does this, and I&#8217;m not sure how I
feel about it.</p>

<p>I don&#8217;t know what order I prefer for the <code>should_receive</code> calls
relative to the rest of the setup. In this case, I chose to put the
message expectations at the top of the test block.</p>

<h3>Final thoughts</h3>

<p>Like most exercises during Code Retreat, preventing return values has
benefits and disadvantages. I like how certain concepts were forced to
become reified and that I had to think more about the consumer of my
code. Contrariwise, I missed not being able to use <code>Struct</code> and really
wanted a <code>Point</code>.</p>

<p>Will I change how I code because of this? Maybe a little bit. It
probably would be good practice to avoid return values at first blush,
but I certainly won&#8217;t stop using them completely. One thing I might
look further into is Ruby 1.9&#8217;s <a href="http://www.ruby-doc.org/core-1.9.3/Enumerator.html"><code>Enumerator</code></a>. This would
allow me to provide a nice function that takes a block or returns an
enumerable for further chaining.</p>

<p>Feel free to read over the <a href="https://github.com/shepmaster/gdcr-no-return-values">code on GitHub</a> if you are
interested!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactor and make changes in different commits]]></title>
    <link href="http://jakegoulding.com/blog/2012/11/04/refactor-and-make-changes-in-different-commits/"/>
    <updated>2012-11-04T14:31:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2012/11/04/refactor-and-make-changes-in-different-commits</id>
    <content type="html"><![CDATA[<p>If you combine refactoring and making a change to your code into the
same commit, you are going to have a bad time.</p>

<!-- more -->


<p>Just in case you&#8217;ve forgotten, <a href="http://en.wikipedia.org/wiki/Refactoring">refactoring</a> is</p>

<blockquote><p>the process of changing a computer program&#8217;s source code without
modifying its external functional behavior</p></blockquote>

<p>When I review a commit that claims to be refactoring, I shift into to
a very specific mindset. I visualize myself as a world-class goalie,
ready to stop any rogue features that come my way; I&#8217;m going to stand
my ground, no matter what.</p>

<p>Contrast refactoring to adding new functionality. In that case, the
author should be adding new objects that fulfill a responsibility,
following the <a href="http://en.wikipedia.org/wiki/Open/closed_principle">open/closed principle</a>. When I review a commit
that adds new functionality, I pay attention that the tests cover the
new functionality, the minimum amount of code was added, and that the
new code is sufficient.</p>

<p>These are very different things to review for.</p>

<h3>Why&#8217;s it bad?</h3>

<p>When you combine refactoring and feature addition into the same
commit, you double the work required to review it. In addition to
figuring out if each changed line is correct, you also have to figure
out what &#8220;correct&#8221; even means!</p>

<p>Beyond the doubled work, you have to change your mindset for <strong>every
line of code</strong>. That&#8217;s an amazing amount of context switching. It&#8217;s
very hard to thoroughly review each line when it&#8217;s hard to even
remember what you are reviewing for.</p>

<p>Combining these disparate actions into one commit isn&#8217;t something that
we do maliciously. In fact, it&#8217;s likely the opposite: good programmers
have an innate drive to make the code better all the time. Sometimes
we see a little problem that we just <em>have</em> to fix up.</p>

<p>The problem is that when we have our programmer hats on, we don&#8217;t
always think about what this commit will mean to others
downstream. This could mean reviewers, approvers, testers,
documenters, whatever needs to happen after the commit.</p>

<h3>What do I do when my commit is too big?</h3>

<p>There are a few main techniques I use when I discover I&#8217;ve done work
that should be in different commits.</p>

<p>If I haven&#8217;t committed yet, and the changes are separate enough, I use
<code>git add -pu</code> to add certain lines of code and not others.</p>

<p>If the changes overlap with each other, I will edit a specific section
of the file until it looks like the intermediate change I really
wanted. I <code>git add</code> the file and immediately revert my editor
changes. I then repeat with the next section.</p>

<p>If I have already committed, then I go into an interactive rebase and
<code>edit</code> the particular commits that are too big. I often create a
throw-away branch so I can easily compare the original and modified
branches to make sure they end up the same.</p>

<p>All of these techniques create &#8220;false history&#8221; - I didn&#8217;t <em>really</em>
make that small step. After I&#8217;m finished, I run a little script that
checks out each commit and runs my tests.</p>

<p>Sometimes, trying to preserve my changes isn&#8217;t worth the time, or I
can see into the future a bit and know ahead of time that I am about
to make a big set of changes. In these cases, I try a spike: I make
the changes willy-nilly, writing down each step as I do it. Then I
throw it away and <em>invert the order of steps</em>. This allows each step
to happen in the order I would prefer, and I often improve on each
step.</p>

<h3>Isn&#8217;t too many small commits just as bad?</h3>

<p>I&#8217;ve heard something like this before:</p>

<blockquote><p>It&#8217;s so small, it doesn&#8217;t deserve it&#8217;s own commit</p></blockquote>

<p>I&#8217;ve <strong>never</strong> had to review a commit that was too small. I have had
to review a commit that was too large. I&#8217;m willing to take the risk of
creating many small commits, especially if all the changes are going
to be made one way or another.</p>

<p>If a commit is small, then I can open it, read the commit message, and
review it within seconds.</p>

<h3>What do I do as a reviewer?</h3>

<p>I use a modified version of the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">single responsibility principle</a>
that applies to commits:</p>

<blockquote><p>A commit should have one, and only one, change.</p></blockquote>

<p>I try to follow steps like these:</p>

<ol>
<li>Read the whole commit message. It should have no <strong>and</strong>s, <strong>or</strong>s,
or <strong>but</strong>s. If it does, I kick it back to the author and request that
the commit be split up into those pieces. Otherwise, I sear the commit
message into my brain.</li>
<li>Read the diff of the commit and evaluate each change against the
commit message. If a line doesn&#8217;t fit with the message, mark the
change as unrelated. If it does, review the line as usual.</li>
<li>Sometimes I keep reading the diff once you I find an unrelated
line, other times I stop at the first one; the original author may be
faster at separating the concerns.</li>
<li>Make sure to thank the author when they provide a commit with a
single focus - positive reinforcement lets us know that we are on the
right track!</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run your tests in a deterministic random order]]></title>
    <link href="http://jakegoulding.com/blog/2012/10/18/run-your-tests-in-a-deterministic-random-order/"/>
    <updated>2012-10-18T18:56:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/10/18/run-your-tests-in-a-deterministic-random-order</id>
    <content type="html"><![CDATA[<p>Running your tests in a random order is a good idea to help shake out
implicit dependencies between tests. Running your tests in a
deterministic random order is even better.</p>

<!-- more -->


<h4>What&#8217;s an implicit dependency?</h4>

<p>It&#8217;s easy to accidentally create order-dependent tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;creates a widget&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Widget</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Awesome Widget&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Widget</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;deletes a widget&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Widget</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">delete</span> <span class="c1"># Implicitly requires the first test to have been run</span>
</span><span class='line'>  <span class="no">Widget</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Why should I care?</h4>

<p>Dependencies between tests are bad for a number of reasons:</p>

<ol>
<li>When a single test fails, you need to run many tests to reproduce
the failure. This makes reproduction slower and more annoying.</li>
<li>The test method is no longer complete documentation. The required setup
for the test is located in many different methods.</li>
<li>The complexity of the test is hidden. What looks like a two line
test may actually comprise hundreds of lines of code. Complex test
code is often an excellent indicator of complex production code.</li>
</ol>


<p>Running tests in a random order isn&#8217;t enough; you need to be able to
reproduce the same random order before you can fix it! <a href="https://www.relishapp.com/rspec/rspec-core/v/2-11/docs/command-line/order-new-in-rspec-core-2-8">RSpec</a>
and <a href="http://www.bootspring.com/2010/09/22/minitest-rubys-test-framework/">MiniTest</a> both offer a way to specify the random seed
on the command line or with environment variables. Unfortunately, the
<a href="http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html">Surefire</a> plugin for Maven does not offer a way to specify
the seed, even though it allows random ordering.</p>

<h4>Continuous integration servers</h4>

<p>At work, we use <a href="http://code.google.com/p/gerrit/">gerrit</a> for code reviews and
<a href="http://jenkins-ci.org/">Jenkins</a> as our CI server. Whenever a new or updated commit
is pushed to gerrit, a build is started in Jenkins. There is also a
Jenkins job to build <code>origin/master</code> every 15 minutes if it has been
updated.</p>

<p>The Gerrit/Jenkins combination allows you to retrigger a specific
build in case there were environmental issues that have since been
fixed. Unfortunately for us, retriggering was being used as a way to
avoid dealing with test failures due to order dependencies. To
encourage us to stop and address our order dependency problem, we
updated both jobs to use a deterministic seed.</p>

<p>For the Gerrit builds, we used the Gerrit change number, which remains
constant across multiple revisions of the same commit. The Gerrit
plugin makes this value available as a environment variable during
script execution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rspec <span class="nv">SPEC_OPTS</span><span class="o">=</span><span class="s2">&quot;--seed $GERRIT_CHANGE_NUMBER&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the <code>origin/master</code> build, we chose to use the Git hash of the
commit. Since the hash contains letters, we used a shell one-liner to
scrape out something that looks reasonable as a seed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">SEED</span><span class="o">=</span><span class="k">$(</span>git rev-parse HEAD | tr -d <span class="s1">&#39;a-z&#39;</span> | cut -b 1-5<span class="k">)</span>
</span><span class='line'>rspec <span class="nv">SPEC_OPTS</span><span class="o">=</span><span class="s2">&quot;--seed $SEED&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Does it work?</h4>

<p>Just a few days after making the above changes, another developer came
to me with a strange problem. His commit was unable to pass the tests
in Gerrit, but the failing test had nothing to do with his changes. We
ran the tests locally using the seed from the Jenkins server and were
able to reproduce the problem. Ultimately, we traced the problem to a
request spec that modified some core configuration settings and didn&#8217;t
reset them successfully. Success!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watch out for lost updates when using Capybara with Selenium]]></title>
    <link href="http://jakegoulding.com/blog/2012/10/10/watch-out-for-lost-updates-when-using-capybara-with-selenium/"/>
    <updated>2012-10-10T19:41:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/10/10/watch-out-for-lost-updates-when-using-capybara-with-selenium</id>
    <content type="html"><![CDATA[<p>At work, I am still working on finding and squashing fun test
failures. In this case, &#8220;fun&#8221; means tests that have an intermittent
failure rate of 5% (or less!). The test issue I worked on today had to
do with the &#8220;lost update&#8221; problem.</p>

<!-- more -->


<h3>The lost update problem</h3>

<p><a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_ss_tl?ie=UTF8&amp;tag=jakgousblo-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0321503627">Growing Object-Oriented Software, Guided by Tests</a> has a great
description and diagram of the problem:</p>

<p><img src="http://jakegoulding.com/images/blog/lost-update.png" alt="The lost update problem" /></p>

<p>The short version is that when you poll a system for its state, it&#8217;s
entirely possible to miss the state you are looking for. In the
diagram, the color changes to red and then to blue before the test
ever has a chance to see that it was red. Since this system will never
go back to red, the test will incorrectly fail.</p>

<h3>The lost update problem in Capybara</h3>

<p>Like many other sites, we use the <a href="http://datatables.net/">DataTables</a> jQuery
plugin to show tabular data. A test that ensured that the filtering
worked looked something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">wait_for_table_loading</span>
</span><span class='line'>  <span class="n">dialog</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;.loading_dialog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">wait_until</span> <span class="p">{</span> <span class="n">dialog</span><span class="o">.</span><span class="n">visible?</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">wait_for_table_ready</span>
</span><span class='line'>  <span class="n">dialog</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;.loading_dialog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">wait_until</span> <span class="p">{</span> <span class="o">!</span> <span class="n">dialog</span><span class="o">.</span><span class="n">visible?</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s1">&#39;filters the list&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">list_path</span>
</span><span class='line'>  <span class="n">click_on</span> <span class="s1">&#39;Filter by active&#39;</span>
</span><span class='line'>  <span class="n">wait_for_table_loading</span>
</span><span class='line'>  <span class="n">wait_for_table_ready</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="s1">&#39;.data-item&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">items</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enabling filtering triggers some slow backend activity, which brings
up the loading dialog. The test waits for that dialog to appear and
disappear before continuing on. Now the entire table is populated and
we can safely see how many elements are in the table.</p>

<p>However, the test will fail if the backend is <em>too fast</em>. The loading
dialog will appear and disappear almost immediately. The test will
time out waiting for the loading dialog that will never appear
again. This behavior can be reliably replicated by adding a sleep to
the test between lines 13 and 14.</p>

<h3>A Capybara solution</h3>

<p>In order to make the test more robust, I rewrote it as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;filters the list&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">list_path</span>
</span><span class='line'>  <span class="n">click_on</span> <span class="s1">&#39;Filter by active&#39;</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_css</span><span class="p">(</span><span class="s1">&#39;.data-item&#39;</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test now ignores the loading dialogs completely, instead asking
Capybara to find a particular number of elements. Asking Capybara to
find things in this manner will let the test leverage the built-in
waiting facilities of Capybara.</p>

<p>In this test, the number of data items won&#8217;t change once the table is
loaded, so it is a safe state to poll. As an additional benefit, the
test now has fewer lines of code and is clearer.</p>

<p>As a downside, when the test fails, the Capybara error message doesn&#8217;t
include how many items were found, which isn&#8217;t as informative as the
equivalent message from the RSpec matcher.</p>

<p>Also, this test still ultimately relies on polling the DOM, so it&#8217;s
possible for similar bugs to pop up in the future.</p>

<h3>The GOOS solution to the lost update problem</h3>

<p>GOOS provides a solution to the lost update problem that can avoid the
problems with polling completely:</p>

<p><img src="http://jakegoulding.com/images/blog/lost-update-fixed.png" alt="The solution to the lost update problem" /></p>

<p>The system under test must be modified to provide notifications when
something interesting happens. This system now has a listener that is
notified when the color changes and what the color is changed to. The
test supplies a simple listener that accumulates the changes and
offers a nice API suited for the tests.</p>

<h3>A hypothetical Capybara solution without polling</h3>

<p>I can imagine a Capybara test that looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;filters the list&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">list_path</span>
</span><span class='line'>  <span class="n">wait_for_js_event</span><span class="p">(</span><span class="s1">&#39;table.loaded&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">click_on</span> <span class="s1">&#39;Filter by active&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="s1">&#39;.data-item&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">items</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Under the hood, there&#8217;s some extra JavaScript going on. The
<code>wait_for_js_event</code> method would inject some JavaScript into the
running Selenium session that creates an event listener and binds it
to the given event. This listener just collects all the events it
receives. After yielding the block, the test code then polls the event
listener, waiting for the event to be captured.</p>

<p>It&#8217;s entirely possible that code that does this already exists, but I
don&#8217;t know of it. It wouldn&#8217;t be a large amount of code to write, but
it would straddle the borders of Capybara, Selenium and JavaScript.</p>

<p>This might be a useful thing for <a href="http://pivotal.github.com/jasmine/">Jasmine</a> tests, so it might
already exist in that ecosystem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding a race condition in Capybara with Selenium]]></title>
    <link href="http://jakegoulding.com/blog/2012/10/08/finding-a-race-condition-in-capybara-with-selenium/"/>
    <updated>2012-10-08T20:40:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/10/08/finding-a-race-condition-in-capybara-with-selenium</id>
    <content type="html"><![CDATA[<p>At work, we&#8217;ve been using <a href="https://github.com/jnicklas/capybara">Capybara</a> and
<a href="https://code.google.com/p/selenium/">Selenium</a> to test our newest web application. Many of us
have used this combination before for our own projects, but it&#8217;s new
territory for a work project.</p>

<p>Every so often, we would get this error from a specific test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Selenium::WebDriver::Error::StaleElementReferenceError:
</span><span class='line'>  Element not found in the cache - perhaps the page has changed since it was looked up</span></code></pre></td></tr></table></div></figure>


<p>The error was intermittent, so we fell into the seductive but
dangerous trap of simply rerunning our tests whenever it
failed. Recently, I had a bit of time and decided to dig into it and
fix it once and for all.</p>

<!-- more -->


<p>My first task was to see if I could reproduce the error locally. We
often saw the error when running the tests on our <a href="http://jenkins-ci.org/">Jenkins</a>
continuous integration server, so there was the possibility that the
problem was environmental. However, we also knew that the failure was
intermittent, so we couldn&#8217;t be sure it was environmental even if the
test passed locally a few times.</p>

<p>I rigged up a small shell script to simply run the test over and over
again while I wandered away from my computer. The script looked
something like:</p>

<figure class='code'><figcaption><span> (test-script-runner.sh)</span> <a href='http://jakegoulding.com/downloads/code/test-script-runner.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nb">set</span> -eu
</span><span class='line'>
</span><span class='line'><span class="nv">failures</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'><span class="k">for </span>run in <span class="sb">`</span>seq 20<span class="sb">`</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    if</span> ! rspec -e <span class="s1">&#39;the bad test&#39;</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nv">failures</span><span class="o">=</span><span class="k">$((</span><span class="nv">$failures</span> <span class="o">+</span> <span class="m">1</span><span class="k">))</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Test run $run complete, $failures failures&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m sure there&#8217;s a proper statistical manner to determine how many
times the test would have to be run without failing to be reasonably
certain that the test won&#8217;t fail, but I didn&#8217;t have to worry about
that - the test failed somewhere within the first ten or so runs.</p>

<p>Now that I knew the test could fail on my local setup, it was time to
dig into what the test was doing. The test was fairly concise and
readable (which I highly appreciated) and looked something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;deletes the element&#39;</span><span class="p">,</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="kp">true</span>  <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">path_to_the_page</span>
</span><span class='line'>  <span class="n">click_on</span> <span class="s1">&#39;Remove item&#39;</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should_not</span> <span class="n">have_css</span><span class="p">(</span><span class="s2">&quot;.item&quot;</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="s2">&quot;Old text&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The exception was coming from line #4 - when the test made the first
assertion about the elements. Unfortunately, the stacktrace isn&#8217;t very
useful, as it mostly contains references to the JavaScript running
inside of Firefox. The exception text indicates that the test has a
reference to an element, but it isn&#8217;t available in the cache
anymore. Considering that the test just deleted the element, this is
certainly suspicious.</p>

<p>At this point, I cloned the capybara repository and started poking
around. A <code>git grep</code> quickly found where <code>has_no_css?</code> was
<a href="https://github.com/jnicklas/capybara/blob/1.1_stable/lib/capybara/node/matchers.rb#L171">defined</a>. Following the thread of code led to
<code>has_no_selector?</code>, which calls the <code>all</code> <a href="https://github.com/jnicklas/capybara/blob/1.1_stable/lib/capybara/node/finders.rb#L109">method</a>. This method
had a pretty clear split between the &#8220;finding&#8221; part of the code and
the &#8220;filtering&#8221; part. There was no magic I used here to see this, just
previous experience debugging race conditions.</p>

<p>I opened up the installed gem and inserted a sleep directly into the
code between the &#8220;finding&#8221; and &#8220;filtering&#8221; sections. It&#8217;s ugly doing
this, but it&#8217;s good to try to not change too many things at once when
debugging. I played with the sleep value a bit and eventually found a
value that reliably reproduced the failure. Success!</p>

<p>Well, maybe not <em>complete</em> success, but at least a step in the right
direction. Even though I could reproduce the problem, I had only
reproduced it in our production application, and I had modified my
installed gem directly. It was time to make a nice test case.</p>

<p>I created a new Rails app and added the requisite RSpec gems. Since we
only need a simple HTML page with a bit of JavaScript to remove the
element, I modified the index.html that ships with Rails to have the
JavaScript inline and created an element and link to wire the action
to.</p>

<p>Since I knew that I would want to make changes to Capybara, I used the
<code>:path</code> parameter in the Gemfile to point to my local checkout of
Capybara. This is an awesome feature of <a href="http://gembundler.com/">Bundler</a> that you might not
know about. It also means I&#8217;m not messing with my generally-available
copy of Capybara, which is good for my sanity.</p>

<p>I then created a stripped-down version of the test, the same as the
example above. After getting everything hooked up, I ran the test but
it didn&#8217;t fail. This was bad news - I had done a few big steps between
the production app and the smaller test case - which one of them could
have changed the behavior?</p>

<p>This is where my knowledge of our production system came in useful. In
that application, we aren&#8217;t just removing something from the page, we
are persisting that deletion to disk. Doing that can add some time
before the JavaScript fires to remove the item. I changed the test
JavaScript to have a delay less than the delay in Capybara and ran the
test again. It failed, just like we wanted it to. To be sure, I ran
the test case a bunch of times to make sure it always failed and for
the expected reason. Success!</p>

<p>Well, almost. Even though I had a test case, I still needed to show
that code to someone who could do something about it. Checking back at
the <a href="https://github.com/jnicklas/capybara">Capybara website</a>, I looked for how to submit a
ticket. Right at the top is a nice, clear comment:</p>

<blockquote><p>Need help? Ask on the mailing list (please do not open an issue on GitHub)</p></blockquote>

<p>So, I pushed my changes to Capybara to <a href="https://github.com/shepmaster/capybara">my fork</a> and
updated my test app to use a remote git version of the gem (another
cool Bundler feature). I then pushed <a href="https://github.com/shepmaster/capybara-race">my test case</a> to
GitHub as well. I took a bit of time to create a short README so that
anyone stumbling on the test app would have a clue as to what it was.</p>

<p>After that, it was just a small matter to write up a clear email to
the Capybara list. I still find emailing new lists scary. Who knows
how the list will respond? This time I got a <a href="https://groups.google.com/forum/?fromgroups=#!topic/ruby-capybara/O3Ib6INOP58">nice surprise</a>:</p>

<blockquote><p>That&#8217;s a very nice bug report, Jake.</p>

<p>It appears to be a bug indeed. I&#8217;ve been able to reproduce it on master as well.</p></blockquote>

<p>A GitHub issue <a href="https://github.com/jnicklas/capybara/issues/843">has been opened</a>, and the bug is well on the
way to being fixed. Yay for Open Source!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Name your variables by the roles they play]]></title>
    <link href="http://jakegoulding.com/blog/2012/10/03/name-your-variables-by-the-roles-they-play/"/>
    <updated>2012-10-03T19:49:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/10/03/name-your-variables-by-the-roles-they-play</id>
    <content type="html"><![CDATA[<p>Have you ever seen a variable with a terrible name? This is of course
a trick question; everyone has. I&#8217;d like to look at a particular
variable-naming annoyance: naming the variable based on the class
name.</p>

<!-- more -->


<p>In a statically-typed language without type inference, like Java, you
have likely seen something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FooBarZed</span> <span class="n">fooBarZed</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FooBarZed</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a dynamically typed language, like Ruby, it would look more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">foo_bar_zed</span> <span class="o">=</span> <span class="no">FooBarZed</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This style of code may make sense to you. Maybe your class names are
self-describing, and so duplicating the class name as the variable
name is just &#8220;reusing a good thing&#8221;.</p>

<p>The problem with naming variables in this style is that the class
name, at <em>best</em>, describes what is special about an object or how the
object works. When you are using the object, you want to know why you
are using it - you want to know the <em>role</em> of the object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># this variable name says nothing new to the reader of the code</span>
</span><span class='line'><span class="n">url_fetcher</span> <span class="o">=</span> <span class="no">UrlFetcher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://example.com/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># this variable name explains why we want to do something</span>
</span><span class='line'><span class="n">conversion_rate_fetcher</span> <span class="o">=</span> <span class="no">UrlFetcher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://example.com/&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a pragmatic argument, think how often you rename a class to better
describe it. Now think how often you&#8217;ve changed a class name AND all
the variables to match the new class.</p>

<p>The role that an object plays changes at vastly different rate than
the name of the class. It&#8217;s unlikely that the role will change
dramatically, as that new role would probably be better represented by
a brand new object. Similarly, code that uses that object is unlikely
to want an object that fills a different role without a rewrite of how
the calling code works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ruby blocks to ensure resources are cleaned up]]></title>
    <link href="http://jakegoulding.com/blog/2012/10/01/using-ruby-blocks-to-ensure-resources-are-cleaned-up/"/>
    <updated>2012-10-01T18:05:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/10/01/using-ruby-blocks-to-ensure-resources-are-cleaned-up</id>
    <content type="html"><![CDATA[<p>In programming, cleaning up resources you have created is an
easily-overlooked problem. In languages like C, you have to clean up
everything by hand: memory, files, network sockets, etc. Languages
that have a garbage collector take away the need to explicitly free
memory, but you still have to manage the other resources.</p>

<!-- more -->


<p>In Ruby, we can use blocks to help ensure resources are closed. You&#8217;ve
probably seen this idiom when dealing with files. The File class
ensures that the file is closed after the block is finished:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;file.txt&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ... work with the file ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this can only be used when the lifespan of the resource is one
method call. If you need to keep the file around in an instance
variable, then you cannot use this pattern, and must fall back to
explicitly closing the resource:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;file.txt&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">close</span>
</span><span class='line'>    <span class="vi">@file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make this code nicer on yourself and others that have to use it,
you should add a method that handles closing the resource for you,
just like <code>File</code> does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">open</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">foo</span>
</span><span class='line'>  <span class="k">ensure</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, this clean implementation of <code>open</code> has a problem if
the constructor of <code>File</code> can throw an exception. The exception will
occur before the variable <code>foo</code> can be set to anything, so the <code>close</code>
message will be sent to <code>nil</code> instead, causing another exception!
<em>This <strong>certainly</strong> didn&#8217;t happen in any code I was writing&#8230;</em></p>

<p>To handle this case, we have to give up on using the implicit `begin&#8220;
block from the function and create our own scope:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">open</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">foo</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="n">foo</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can safely create a <code>Foo</code> and close it all in one place, but
what if another object wants to keep an instance of <code>Foo</code> around for
longer? It&#8217;s nice to transparently handle both cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">open</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">foo</span> <span class="k">unless</span> <span class="nb">block_given?</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">foo</span>
</span><span class='line'>    <span class="k">ensure</span>
</span><span class='line'>      <span class="n">foo</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be careful when using JUnit's expected exceptions]]></title>
    <link href="http://jakegoulding.com/blog/2012/09/26/be-careful-when-using-junit-expected-exceptions/"/>
    <updated>2012-09-26T18:52:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/09/26/be-careful-when-using-junit-expected-exceptions</id>
    <content type="html"><![CDATA[<p>For many people, JUnit is the grand-daddy of testing frameworks. Even
though other testing frameworks came first, a lot of people got their
start with JUnit.</p>

<p>People often start out testing with simple Boolean assertions, then
move on substring matching, then maybe on to mocks and stubs. At some
point, however, most people want to assert that their code throws a
particular exception, and that&#8217;s where our story starts.</p>

<!-- more -->


<p>When JUnit 3 was the latest and greatest, you were supposed to catch
the exception yourself and assert if no such exception was
thrown. Here&#8217;s an example I tweaked from <a href="http://radio.javaranch.com/lasse/2007/05/17/1179405760728.html">Lasse&#8217;s blog</a> and the
JUnit documentation for <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/Test.html"><code>@Test</code></a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_for_npe_with_try_catch</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'>        <span class="n">fail</span><span class="o">(</span><span class="s">&quot;should&#39;ve thrown an exception!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NullPointerException</span> <span class="n">expected</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// go team!</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the newest versions of JUnit 4 (4.11 at the time of writing),
there are two more options available to you: the <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/Test.html"><code>@Test</code></a>
annotation and the <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/ExpectedException.html"><code>ExpectedException</code></a> rule.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_for_npe_with_annotation</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Rule</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ExpectedException</span> <span class="n">thrown</span> <span class="o">=</span> <span class="n">ExpectedException</span><span class="o">.</span><span class="na">none</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_for_npe_with_rule</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">thrown</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both of these forms offer a lot in the way of conciseness and
readability, and I prefer to use them when I need to test this kind of
thing. However, both forms can cause a test to pass when it shouldn&#8217;t
when the code can throw the exception in multiple ways:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_for_npe_but_which_one</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">CoolObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CoolObject</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">obj</span><span class="o">.</span><span class="na">doSomeSetupWork</span><span class="o">(</span><span class="mi">42</span><span class="o">);</span>  <span class="c1">// What actually throws the exception</span>
</span><span class='line'>    <span class="n">obj</span><span class="o">.</span><span class="na">calculateTheAnswer</span><span class="o">();</span> <span class="c1">// What we want to throw the exception</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In languages that have lambdas or equivalents, this problem is easily
avoided. For example, you can use <a href="https://www.relishapp.com/rspec/rspec-expectations/v/2-11/docs/built-in-matchers/raise-error-matcher"><code>expect</code></a> and <a href="https://www.relishapp.com/rspec/rspec-expectations/v/2-11/docs/built-in-matchers/raise-error-matcher"><code>raise_error</code></a> in RSpec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;throws_a_npe&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">obj</span> <span class="o">=</span> <span class="no">CoolObject</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">obj</span><span class="o">.</span><span class="n">do_some_setup_work</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span> <span class="p">{</span> <span class="n">obj</span><span class="o">.</span><span class="n">calculate_the_answer</span> <span class="p">}</span><span class="o">.</span><span class="n">to_raise</span><span class="p">(</span><span class="no">NoMethodError</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Alternate solutions</h4>

<p>Until a version of Java is released with lambdas, I see no better
solution than using try-catch blocks, the old JUnit 3 way. You could
define an interface and then create anonymous classes in the test to
have the desired level of granularity. This is a pretty bulky syntax,
any variables you use in the object would need to be declared final,
and then you have to explictly run the code!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_for_one_of_two_npe_bulky_syntax</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">CoolObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CoolObject</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">obj</span><span class="o">.</span><span class="na">doSomeSetupWork</span><span class="o">(</span><span class="mi">42</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">new</span> <span class="nf">GonnaThrowException</span><span class="o">(</span><span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">obj</span><span class="o">.</span><span class="na">calculateTheAnswer</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you can rephrase the problem slightly, you might be able to use the
fact that <code>ExpectedException</code> can assert on the exception message to
restrict your test. If you know that <strong>only</strong> your error can include a
certain string, then checking for that string could prevent tests from
passing when they shouldn&#8217;t.</p>

<p>Another solution would be to modify your code or tests so that you
don&#8217;t have to deal with the problem in the first place. If you can
move the setup code into a <code>@Before</code> block, then the exception
wouldn&#8217;t be caught by the test. If you can change your code so it
cannot throw the exception multiple ways, or if it throws different
exceptions, then that would also allow you to sidestep the problem.</p>

<p><strong>Update 2012-09-27</strong></p>

<p>David Bradley points out that if you configure the JUnit rule right
before the expected exception, you can reduce the possibility of
error. Unfortunately, exceptions thrown <em>after</em> the desired line will
still cause the test to pass incorrectly. This may not be a problem in
practice, as you are unlikely to continue the test after an exception
should be thrown, and most Java tests do not have a teardown phase.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Rule</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ExpectedException</span> <span class="n">thrown</span> <span class="o">=</span> <span class="n">ExpectedException</span><span class="o">.</span><span class="na">none</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_for_npe_with_rule_at_last_moment</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">CoolObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CoolObject</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">obj</span><span class="o">.</span><span class="na">doSomeSetupWork</span><span class="o">(</span><span class="mi">42</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">thrown</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">obj</span><span class="o">.</span><span class="na">calculateTheAnswer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Any exceptions here will still cause the test to pass incorrectly</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A refactoring example: lots of if-else statements on strings]]></title>
    <link href="http://jakegoulding.com/blog/2012/09/24/a-refactoring-example-if-else-on-strings/"/>
    <updated>2012-09-24T12:00:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/09/24/a-refactoring-example-if-else-on-strings</id>
    <content type="html"><![CDATA[<p>I recently did a bit of work that turned out to be a great exercise
for refactoring a huge sequence of if-else statements based on
strings. There are a few ugly bits left, so I&#8217;m still poking at it,
but I am pleased with my progress so far.</p>

<!-- more -->


<p>While the original code was Java, the meat of the problem can be
easily shown in Ruby. Translating it to Ruby also makes it easier to
make sure I don&#8217;t accidentally share any proprietary information!</p>

<p>The problem involves processing a hunk of XML to create nested
configuration objects. The original implementation used a sequence of
if-else blocks, but the Ruby version would have used a <code>case</code>
statement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ObjectsFromXML</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_object</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">element</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">element</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_object</span> <span class="o">=</span> <span class="n">f</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">element</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">b</span><span class="o">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">element</span><span class="o">[</span><span class="s1">&#39;weight&#39;</span><span class="o">].</span><span class="n">to_f</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_object</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>    <span class="c1"># ... about 20 of these cases in total</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s2">&quot;Invalid node&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">element</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">process</span><span class="p">(</span><span class="n">new_object</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function has some issues: it is pretty long, and each case has
some similarity to the next but are different enough to be
annoying. The code certainly doesn&#8217;t try to adhere to the Single
Responsibility Principle!</p>

<p>My first step was to split the blocks into classes with a common interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooHandler</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">element</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BarHandler</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">element</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span>
</span><span class='line'>      <span class="n">b</span><span class="o">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">element</span><span class="o">[</span><span class="s1">&#39;weight&#39;</span><span class="o">].</span><span class="n">to_f</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ObjectsFromXML</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_object</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">element</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>      <span class="n">new_object</span> <span class="o">=</span> <span class="no">FooHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>      <span class="n">new_object</span> <span class="o">=</span> <span class="no">BarHandler</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ... other cases</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s2">&quot;Invalid node&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">element</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">process</span><span class="p">(</span><span class="n">new_object</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This corrals the item-specific code to an item-specific class. If I
need to change how the Bar class is created, only the BarHandler class
needs to be updated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooHandler</span>
</span><span class='line'>  <span class="c1"># As above...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BarHandler</span>
</span><span class='line'>  <span class="c1"># As above...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ObjectsFromXML</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:handlers</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@handlers</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">handlers</span><span class="o">[</span><span class="s1">&#39;foo&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">FooHandler</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">handlers</span><span class="o">[</span><span class="s1">&#39;bar&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">BarHandler</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="c1"># ... other cases</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="n">handler</span> <span class="o">=</span> <span class="n">handlers</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">element</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span> <span class="k">raise</span> <span class="s2">&quot;Invalid node&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">new_object</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="n">element</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">process</span><span class="p">(</span><span class="n">new_object</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now all the handlers are in a hash, keyed by the expected element
name. This allows me to pull out the correct handler and go. The
<code>process</code> function now only needs to be concerned with picking the
right handler and dealing with children elements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooHandler</span>
</span><span class='line'>  <span class="c1"># As above...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">element_name</span>
</span><span class='line'>    <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BarHandler</span>
</span><span class='line'>  <span class="c1"># As above...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">element_name</span>
</span><span class='line'>    <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Handlers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@handlers</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@handlers</span><span class="o">[</span><span class="n">handler</span><span class="o">.</span><span class="n">element_name</span><span class="o">]</span> <span class="o">=</span> <span class="n">handler</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="n">handler</span> <span class="o">=</span> <span class="n">handlers</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">element</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span> <span class="k">raise</span> <span class="s2">&quot;Invalid node&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ObjectsFromXML</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:handlers</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@handlers</span> <span class="o">=</span> <span class="no">Handlers</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">handlers</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="no">FooHandler</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="n">handlers</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="no">BarHandler</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ... other cases</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_object</span> <span class="o">=</span> <span class="n">handlers</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="n">element</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">process</span><span class="p">(</span><span class="n">new_object</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have moved the concept of the expected element name into the
handler itself. This makes sense, as each handler should know what
name it expects, not some other piece of code. I also took the
opportunity to move the code purely related to the handlers to a new
class that is highly focused on that one responsibility.</p>

<p>Some further refinements happened after this last point. The
<code>ObjectsFromXML</code> class became another <code>Handler</code> class, which made it
the same level of abstraction as the other handlers and removed a
redundant <code>process</code> method. The return code was removed because it
wasn&#8217;t used except in a few tests. Iterating over children was moved
to each class that could contain children.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The stages of code review]]></title>
    <link href="http://jakegoulding.com/blog/2012/07/01/the-stages-of-code-review/"/>
    <updated>2012-07-01T13:37:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2012/07/01/the-stages-of-code-review</id>
    <content type="html"><![CDATA[<p>We recently started using <a href="http://code.google.com/p/gerrit/">gerrit</a> to perform code reviews for
a legacy C codebase that I work on. I also help out on a couple of
newer Java and Ruby projects that have had the benefit of having code
reviews and testing infrastructure from day one.</p>

<!-- more -->


<p>Starting to use gerrit on our C code has led me to think about how we
approach code reviews, and I&#8217;ve identified some stages that we have
gone through. It&#8217;s loosely sorted by the order in which we adopted
each check. While not every commit needs each point, this is a general
idea of what might be required.</p>

<ol>
<li><p>Functionality</p>

<p>This was what started us on the code review path - sometimes we
would commit something that just didn&#8217;t work right. Occasionally,
the code wouldn&#8217;t even compile! To try and address these problems,
we would have a coworker give the code a once-over before pushing
it. We actually started doing this long before gerrit by walking
over to another desk.</p></li>
<li><p>Function names</p>

<p>One of our explicit coding conventions is that non-static functions
must be prefixed with the module name they belong to. This keeps us
sane and helps prevent name collisions. We also have a few
conventions for constructors, destructors and other common
patterns. These are all easy to check for and was something we
started doing almost immediately.</p></li>
<li><p>Resource leaks</p>

<p>After a few annoying memory leaks got committed, we started looking
at the code with a critical eye for all kinds of leaks. Resource
leaks are easy enough to add and subsequently miss, especially in
C. Leaks are really just a special type of non-functioning code,
but one that bites you days/weeks/years later instead of
immediately.</p>

<p>Sometimes we use a tool such as <a href="http://valgrind.org/">valgrind</a> to test for
leaks, but in many cases we just inspect the code visually. We
check to see if resources are handled consistently and pay special
attention to various error conditions.</p></li>
<li><p>Efficiency</p>

<p>For better or worse, we almost always worry about how optimized our
code is. Sometimes this is can be a valuable exercise, but in most
situations it was probably overkill. There&#8217;s just a warm fuzzy
feeling when you catch an O(n<sup>2</sup>) algorithm that could be
O(n log n), even if you spend more time coming up with the faster
algorithm than will ever be saved in runtime. Since this focus on
optimization is part of our culture, it has found it&#8217;s way into our
reviews.</p></li>
<li><p>Tests</p>

<p>Tests fall lower on this list than I would prefer. Unit testing C
code is, at best, hard and/or annoying. Add the fact that trying to
test code that was never designed to be tested is painful, and you
can easily see why we tend to turn a blind eye when a commit
doesn&#8217;t add any new tests.</p></li>
<li><p>Documentation</p>

<p>Code written in C should probably have more documentation than most
other languages, simply due to all the ways you can shoot yourself
in the foot. For example, you can&#8217;t tell if any given function will
take ownership of the pointer you pass it, that information has to
be documented somewhere. When we prefix our function names with the
module name, the descriptive part of the name is often shortened to
prevent extremely long function names. This means the function
documentation is vital to understand what the function does.</p>

<p>Reviewing documentation often comes down to checking that it makes
sense and is proper English. It&#8217;s impressive how mangled a sentence
can get when you refactor the code it is trying to describe.</p></li>
<li><p>Coding style</p>

<p>Many different aspects of code fall into &#8220;style&#8221;: the contents,
formatting and spelling of comments; the names of variables, static
functions, and structures; the size and complexity of functions;
the contents of structures.</p>

<p>These stylistic issues can be difficult to talk about in a code
review, since sometimes it comes down to personal preference. The
best you can do is express your preference and try to sway the
other developer to your line of thinking. It helps if both people
realize that the code has to be read and maintained by the entire
development group.</p></li>
<li><p>Test style</p>

<p>Test code style is an entirely different kettle of fish from
production code style. A test needs to focus on how a user would
want to use the code. It should minimize the clutter required to
perform the test so as to make the test as readable as possible,
while still highlighting the interesting part under test.</p>

<p>Similar to code style, the difficulty reviewing tests comes from
differences in personal preference. This is compounded by the fact
that we are not as experienced with writing great tests yet.</p></li>
<li><p>Commit message</p>

<p>Right now, this is my holy grail of code reviews. I once spent 15
minutes skimming through the git log to determine if we had a
preferred <em>verb tense</em> in our commit messages (we did). More
reasonably, this can involve ensuring that commit messages are
capitalized consistently and that they describe why a change is
being made, not just what or how.</p></li>
</ol>


<h4>Where we are now</h4>

<p>The C project is currently somewhere around the &#8220;Tests&#8221; or
&#8220;Documentation&#8221; stages. The Java and Ruby projects expect tests and
documentation, so they hover around the &#8220;Code style&#8221; and &#8220;Test style&#8221;
stages; I&#8217;ve only had one or two opportunities to correct someones
verb tense :-).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attaching top-level methods to an object in Ruby]]></title>
    <link href="http://jakegoulding.com/blog/2012/03/03/attaching-top-level-methods-to-an-object-in-ruby/"/>
    <updated>2012-03-03T10:48:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2012/03/03/attaching-top-level-methods-to-an-object-in-ruby</id>
    <content type="html"><![CDATA[<p>Sometimes when you are doing rapid development, you need to create a
new method <em>right now</em>, but you don&#8217;t put the method in the right
spot. Maybe you aren&#8217;t sure what object should ultimately have the
functionality. Maybe you are simply too lazy to open the correct
file. Whatever the reason, you decide to define the method right there
at the top-level, pretending you are a procedural programmer.</p>

<!-- more -->


<p>Time passes, and you finally decide it is time to move that method to
where it belongs. The problem is that someone (certainly not you&#8230;)
has been calling that method from <em>everywhere</em>. Fixing all the calls
to the method at once will be a huge change; you prefer to make
smaller, easier to review changes. Or maybe you don&#8217;t have control
over all code that calls the method, and so you <em>can&#8217;t</em> change all the
the calls.</p>

<p>Here&#8217;s an example of the problem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_value</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>  <span class="n">object</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="n">param</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyObject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">value</span>
</span><span class='line'>    <span class="mi">10</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyObject</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">add_value</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;d really like <code>MyObject</code> to have an <code>add_value</code> method, instead of
it just floating around at the top-level. However, you don&#8217;t want to
just copy code around - what if one of the implementations changes?
Your first instinct might be to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyObject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_value</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'>    <span class="n">add_value</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this is that once you are inside the class
definition, all calls to <code>add_value</code> will be handled by the instance,
not the top-level method.</p>

<p>You could avoid this by making the top-level method and the instance
method have unique names. If you like the existing name for both
methods, you could alias the original name to a more unique one to
avoid shadowing it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span> <span class="ss">:i_am_secret_method_add_value</span> <span class="ss">:add_value</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyObject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_value</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i_am_secret_method_add_value</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another solution is to qualify access to the top-level method. This
can be done by maintaining a reference to the object that defines the
method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reference_to_main</span> <span class="o">=</span> <span class="nb">self</span>                            <span class="c1"># 1</span>
</span><span class='line'><span class="no">MyObject</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>                              <span class="c1"># 2</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:add_value</span> <span class="k">do</span> <span class="o">|</span><span class="n">param</span><span class="o">|</span>
</span><span class='line'>    <span class="n">reference_to_main</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:add_value</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span> <span class="c1"># 3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>We start by stashing a reference to the object that defines the
top-level method. This object is named &#8220;main&#8221;.</li>
<li>If we reopened our class the traditional way, using <code>class MyObject</code>,
the reference to main would fall out of scope. Instead, we use
<code>class_eval</code>.</li>
<li>The definition of the <code>add_value</code> instance method must use <code>send</code> as
the top-level method is private.</li>
</ol>


<p>If you don&#8217;t want to modify the object directly, you can apply the
same techniques to a module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MathModule</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">reference_to_main</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'><span class="no">MathModule</span><span class="o">.</span><span class="n">module_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:add_value</span> <span class="k">do</span> <span class="o">|</span><span class="n">param</span><span class="o">|</span>
</span><span class='line'>    <span class="n">reference_to_main</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:add_value</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyObject</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">MathModule</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using modules leads to another solution. You can move the top-level
method into a module, and use the module with both the class and the
main object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MathModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_value</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="n">param</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">extend</span> <span class="no">MathModule</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyObject</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">MathModule</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_value</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The downside to this solution is that the object now has two
<code>add_value</code> methods. One of the methods takes any instance of the
class, which would be confusing to anyone trying to figure out how to
use the object.</p>

<p>The easiest and clearest solution to this problem is not to use clever
metaprogramming, but just flip the way you think about the
problem. Move the entire method into the object and leave a stub
method that redirects to the object&#8217;s implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_value</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
</span><span class='line'>  <span class="n">object</span><span class="o">.</span><span class="n">add_value</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyObject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_value</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">+</span> <span class="n">param</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Double Terminology]]></title>
    <link href="http://jakegoulding.com/blog/2012/01/12/test-double-terminology/"/>
    <updated>2012-01-12T07:37:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2012/01/12/test-double-terminology</id>
    <content type="html"><![CDATA[<p>While listening to the Code Quality panel discussion at
<a href="http://codemash.org/">CodeMash</a>, I <a href="https://twitter.com/#!/JakeGoulding/status/157261614448521216">tweeted</a> about &#8220;the state
of mocking&#8221;:</p>

<blockquote><p>The state of &#8220;mocking&#8221; is that the term &#8220;mocking&#8221; is misused by
everyone. You often mean &#8220;test double&#8221; or &#8220;stub&#8221;.</p></blockquote>

<p>This garnered some retweets and some great replies, so I wanted to
have the opportunity to respond in a little longer form. I&#8217;ve written
this post between sessions and in the halls, so give me a little
leeway and feel free to send me a tweet with corrections, arguments,
whatever.</p>

<!-- more -->


<h2>Test frameworks encourage misuse</h2>

<blockquote><p>[I]t doesn&#8217;t help that most mocking frameworks are used for stubs</p></blockquote>

<p><a href="https://twitter.com/#!/F1nglas/status/157421334220120065">@F1nglas</a> mentions that <a href="http://code.google.com/p/moq/">moq</a> does this, and I
know that <a href="http://code.google.com/p/mockito/">Mockito</a> does as well. <a href="https://www.relishapp.com/rspec">RSpec</a> does better
in this area. From the <a href="https://www.relishapp.com/rspec/rspec-mocks">rspec-mock</a> documentation:</p>

<blockquote><p>Use the <code>double</code> method to create [a test double.] You can also use
the <code>mock</code> and <code>stub</code> methods to create test doubles, however these
methods are there for backward compatibility only</p></blockquote>

<p>Remember that most of these tools we use are open source: we can
submit patches to improve them. In the meantime, we can add local
alias methods that better express our intent.</p>

<h2>Saying &#8220;mock&#8221; is just more fluid</h2>

<blockquote><p>[P]eople find it easier to say &#8220;I&#8217;ll mock that out&#8221; than &#8220;I&#8217;ll
test-double that out&#8221;.</p></blockquote>

<p><a href="https://twitter.com/#!/jitterted/status/157265770403987456">@jitterted</a>&#8217;s point is spot on; it <em>is</em> easier to say
&#8220;mock&#8221;. However, I don&#8217;t usually want to use just a test double. I
always want to do/use something particular: stub, mock, dummy, etc.</p>

<p>I&#8217;d love it if we as a community could come up with a better verb to
use to mean the generic &#8220;use a test double&#8221;.</p>

<h2>Doesn&#8217;t language evolve?</h2>

<blockquote><p>[A] term takes on the meaning that &#8220;everyone&#8221; gives it</p></blockquote>

<p><a href="https://twitter.com/#!/JuliansThoughts/status/157372211840299009">@JuliansThoughts</a></p>

<blockquote><p>The meaning of a word is defined by common understanding</p></blockquote>

<p><a href="https://twitter.com/#!/roblally/status/157361888420827137">@roblally</a></p>

<blockquote><p>[M]isused by everyone is an evolving definition</p></blockquote>

<p><a href="https://twitter.com/#!/boulderDanH/status/157262539372249088">@boulderDanH</a></p>

<p>Let me get this out of the way first: I <strong>love</strong> the evolution of
language. Dropping irrelevant words, new words being created, and
expanding the meaning of existing words are all good things.</p>

<p>The root issue here is not that language is evolving. The root issue
is that our understanding of the tools and techniques we are referring
to by that language hasn&#8217;t gotten to the point where we can substitute
one for the other and know <strong>conclusively</strong> what we really mean.</p>

<p>If I said to you, the programmer: &#8220;Use a list to store the names&#8221;. You
go off and write whatever you need, then come back for code review and
I now say: &#8220;Why can&#8217;t I look up a specific name efficiently?&#8221;. You
would be outraged; why did I tell you to use a list when I really
meant a hashtable instead? My response? &#8220;Oh, you know that language
evolves&#8221;.</p>

<p>If I&#8217;d originally said to use a &#8220;collection&#8221;, a more abstract concept
than either list or hashtable, that would force you to think about
what you need to do and how you were going to do it. I&#8217;m not
conflating a specific idea with a general concept.</p>

<p>As community, we have heaps of experience with various types of
collections; we don&#8217;t have that same strong background with test
doubles yet. When we use &#8220;mock&#8221; when we should use &#8220;dummy&#8221; or &#8220;stub&#8221;
or &#8220;test double&#8221;, we avoid thinking about what we really need to do
and why we need to do it.</p>

<p>By using &#8220;mock&#8221; inappropriately, we confuse two distinct concepts. We
then complain that &#8220;mocks&#8221; suck and don&#8217;t do what we need them to
do. Mocks, stubs, fakes and dummies all have a place and a
purpose. Just as using a list when you should use a hashtable reflects
poorly on the programmer, so does using a mock when you should use a
stub.</p>

<p>Mocks are <strong>not</strong> stubs. Don&#8217;t believe me. Believe
<a href="http://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs">Martin Fowler</a>. Believe
<a href="http://xunitpatterns.com/">Gerard Meszaros</a>. Watch
<a href="http://confreaks.net/videos/659-rubyconf2011-why-you-don-t-get-mock-objects">Why You Don&#8217;t Get Mock Objects</a> by Gregory
Moeck. Whatever you do, make sure you understand what a mock object
truly is before you start conflating terms.</p>

<p><em>Note:</em> Don&#8217;t take from this post that I always do or say the right
thing. I have other posts on this same blog that incorrectly refer to
test doubles as &#8220;mocks&#8221;. Most of those posts were written before I
learned the difference myself. I should edit those posts to clarify my
real intent. The important thing is that as we go forward we should be
careful and precise about what we mean.</p>

<p>Discuss on <a href="http://www.reddit.com/r/programming/comments/off9p/test_double_terminology_the_misuse_of_the_term/">reddit</a> or <a href="http://news.ycombinator.com/item?id=3460509">Hacker News</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbing the Builder pattern in Mockito]]></title>
    <link href="http://jakegoulding.com/blog/2012/01/09/stubbing-builder-pattern-in-mockito/"/>
    <updated>2012-01-09T12:00:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2012/01/09/stubbing-builder-pattern-in-mockito</id>
    <content type="html"><![CDATA[<p>Recently, I was asked to help review new tests for production code
that made use of the <a href="http://en.wikipedia.org/wiki/Builder_pattern">Builder</a> pattern. The code in question
did not lend itself to nice and easy testing, but leveraging a
lesser-used bit of <a href="http://code.google.com/p/mockito/">Mockito</a> functionality helped make the
code better.</p>

<!-- more -->


<p>Originally, the tests created a test double for the builder object and
then stubbed all of the methods on the builder to return the builder
double itself. The code looked a bit like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">builder_test_v1</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="n">f</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">FooBuilder</span> <span class="n">b</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">FooBuilder</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">enableAlpha</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">disableBeta</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">increaseGamma</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">build</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">productionCode</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">f</span><span class="o">).</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">productionCode</span><span class="o">(</span><span class="n">FooBuilder</span> <span class="n">builder</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">// code that uses the builder...</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="na">enableAlpha</span><span class="o">().</span><span class="na">disableBeta</span><span class="o">().</span><span class="na">increaseGamma</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few downsides to this approach. The first thing we noticed
was the amount of work done to set up the builder compared to the rest
of the test. All that line noise distracts us from the meaning of the
test. This can be easily improved by pulling the builder setup into a
separate method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">builder_test_v2</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="n">f</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">FooBuilder</span> <span class="n">b</span> <span class="o">=</span> <span class="n">newBuilderMock</span><span class="o">();</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">build</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">productionCode</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">f</span><span class="o">).</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">FooBuilder</span> <span class="nf">newBuilderMock</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">FooBuilder</span> <span class="n">b</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">FooBuilder</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">enableAlpha</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">disableBeta</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">increaseGamma</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>While the test is now easier to read and the new method is reusable in
other tests, we still will be in trouble when the methods of the
builder change.</p>

<p>If your builder implements an interface, you should consider creating
an implementation of that interface that you can easily configure for
testing. Something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestingFooBuilder</span> <span class="kd">implements</span> <span class="n">FooBuilder</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Foo</span> <span class="n">returnValue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TestingFooBuilder</span><span class="o">(</span><span class="n">Foo</span> <span class="n">returnValue</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">returnValue</span> <span class="o">=</span> <span class="n">returnValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">FooBuilder</span> <span class="nf">enableAlpha</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">FooBuilder</span> <span class="nf">disableBeta</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">FooBuilder</span> <span class="nf">increaseGamma</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Foo</span> <span class="nf">build</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">returnValue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">builder_test_v3</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="n">f</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">FooBuilder</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestingFooBuilder</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">productionCode</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">f</span><span class="o">).</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An implementation like this allows you to lean on the compiler when
the interface changes.</p>

<p>If you don&#8217;t have a interface to implement, you could subclass
the concrete builder class and insert your test-specific logic
there. The downside to this is that newly-added methods will inherit
their implementation from the parent class, which can cause very
strange test failures.</p>

<p>We did not have an interface to adhere to, so we used Mockito&#8217;s
<code>Answer</code> class to provide a middle ground solution. When you create a
new mock, an <code>Answer</code> can be used to provide default behavior for
methods. Here&#8217;s the custom <code>Answer</code> we came up with:</p>

<figure class='code'><figcaption><span> (AnswerWithSelf.java)</span> <a href='http://jakegoulding.com/downloads/code/AnswerWithSelf.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the mock object itself for any method that returns the specified class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnswerWithSelf</span> <span class="kd">implements</span> <span class="n">Answer</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Answer</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">delegate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReturnsEmptyValues</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">AnswerWithSelf</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">clazz</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">answer</span><span class="o">(</span><span class="n">InvocationOnMock</span> <span class="n">invocation</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">returnType</span> <span class="o">=</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">getReturnType</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">returnType</span> <span class="o">==</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">invocation</span><span class="o">.</span><span class="na">getMock</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">answer</span><span class="o">(</span><span class="n">invocation</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The answer can be used like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">builder_test_v4</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="n">f</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">FooBuilder</span> <span class="n">b</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">FooBuilder</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">AnswerWithSelf</span><span class="o">(</span><span class="n">FooBuilder</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">build</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">productionCode</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">f</span><span class="o">).</span><span class="na">someMethod</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>Answer</code> can be used with any <a href="http://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a> that
returns the original object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When refactoring isn't refactoring]]></title>
    <link href="http://jakegoulding.com/blog/2012/01/02/when-refactoring-isnt-refactoring/"/>
    <updated>2012-01-02T12:00:00-05:00</updated>
    <id>http://jakegoulding.com/blog/2012/01/02/when-refactoring-isnt-refactoring</id>
    <content type="html"><![CDATA[<p>What is refactoring? Martin Fowler <a href="http://martinfowler.com/refactoring/">provides</a> a solid
definition:</p>

<blockquote><p>Refactoring is a disciplined technique for restructuring an
existing body of code, altering its internal structure without
changing its external behavior.</p></blockquote>

<p>That description seems fairly reasonable; let&#8217;s look at some potential
refactoring techniques.</p>

<!-- more -->


<h2>Example 1</h2>

<h4>Before</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foobar</span>
</span><span class='line'>    <span class="s1">&#39;foo&#39;</span> <span class="o">+</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>After</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foobar</span>
</span><span class='line'>    <span class="s1">&#39;foo&#39;</span> <span class="o">+</span> <span class="n">bar</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>    <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This one is pretty clear-cut - it&#8217;s a refactoring technique that any
programmer would recognize, even if she had never heard of the term
&#8220;refactoring&#8221;. It goes by the name <a href="http://martinfowler.com/refactoring/catalog/extractMethod.html">Extract Method</a>.</p>

<h2>Example 2</h2>

<h4>Before</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">alphabet</span>
</span><span class='line'>    <span class="s1">&#39;alpha&#39;</span> <span class="o">+</span> <span class="n">bet</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bet</span>
</span><span class='line'>    <span class="s1">&#39;bet&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>After</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">alphabet</span>
</span><span class='line'>    <span class="s1">&#39;alpha&#39;</span> <span class="o">+</span> <span class="s1">&#39;bet&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the inverse of the first example, but is it a refactoring
technique?  There is a technique called
<a href="http://martinfowler.com/refactoring/catalog/inlineMethod.html">Inline Method</a>, so it certainly seems plausible.</p>

<h2>Example 3</h2>

<h4>Before</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Parent</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span> <span class="o">&lt;</span> <span class="no">Parent</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">greet</span>
</span><span class='line'>    <span class="s1">&#39;hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span> <span class="o">&lt;</span> <span class="no">Parent</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>After</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Parent</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">greet</span>
</span><span class='line'>    <span class="s1">&#39;hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span> <span class="o">&lt;</span> <span class="no">Parent</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span> <span class="o">&lt;</span> <span class="no">Parent</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, there is a related refactoring technique,
<a href="http://martinfowler.com/refactoring/catalog/pullUpMethod.html">Pull Up Method</a>. This example differs from the linked
one, as only one of the subclasses has the method definition to start
with. This difference makes us less ready to call our changes
refactoring.</p>

<p>Here&#8217;s the trick: from just the code above, <strong>you can&#8217;t tell if these
changes constitute refactoring or not</strong>.</p>

<h2>In which details are examined</h2>

<p>The distinction comes from two important words in the definition of
refactoring: <em>internal</em> and <em>external</em>. These three examples only show
the code being changed (the internal structure), not how other objects
interact with this code (the external behavior).</p>

<p>Take a look at the second example - if any object in the entire system
ever calls the <code>bet</code> method, then removing the method will cause the
behavior of the system as a whole to change.</p>

<p>The first and third examples are actually the same from this point of
view - they both add a new method. You might think that adding a
method is safe, but in truth it depends on the circumstances.</p>

<p>In a statically-typed language, adding a method is safe because no
other code could have tried to call the method without getting a
syntax error. In contrast, a dynamically-typed language like Ruby can
make runtime decisions based on what methods an object
implements. This means that adding a method might trigger completely
new behavior elsewhere.</p>

<h2>In which time is considered</h2>

<p>Let&#8217;s focus on the third example and assume that the above caveat
about adding methods in dynamically-typed languages doesn&#8217;t apply.</p>

<p>First, we decide that the code would be better if we moved the <code>greet</code>
method from <code>A</code> to <code>Parent</code>. This change would be refactoring - no
external behavior has changed.</p>

<p>Second, instead of just making the code better, assume that user
feedback suggests that that the <code>B</code> class needs a <code>greet</code> method. This
means that we:</p>

<ol>
<li>Create a failing test for our new functionality.</li>
<li>Move the <code>greet</code> method from <code>A</code> to <code>Parent</code>.</li>
</ol>


<p>Even though the code is modified in the same way for both examples,
the second time is <em>not refactoring</em> - we are changing the behavior of
the system from failing to passing. The only difference is that time
has passed and the requirements of the system are different.</p>

<h2>In which exceptions are noted</h2>

<p>All three of the original examples have one thing in common: they all
show refactoring techniques that change the interface of the
class. Doing so means that collaborating objects must be viewed as the
external code that relies on certain behavior.</p>

<p>Some refactoring techniques change code only within a single method,
such as <a href="http://martinfowler.com/refactoring/catalog/splitLoop.html">Split Loop</a>. In most cases, these techniques
don&#8217;t have to worry about changing the external behavior. Intra-method
refactoring can only cause a problem when the method has side-effects
that are visible outside of the method.</p>

<p>Another factor that can come into play is the visibility of the
method(s) being refactored. If they are <code>private</code> (or whatever
language equivalent), you can feel more secure when refactoring. This
is because limited visibility restricts what code can be considered
external.</p>

<h2>In which the real world is consulted</h2>

<p>It is imperative to consider the environment in which code exists
before refactoring it; if the environment is ignored, then you cannot
possibly understand the desired behavior of the code.</p>

<p>A main point from the blog post
<a href="http://hamletdarcy.blogspot.com/2009/06/forgotten-refactorings.html">Forgotten Refactorings</a> by Hamlet D&#8217;Arcy is that it&#8217;s
not really refactoring if the code being changed isn&#8217;t covered by
tests. This is because tests are the single-best way to nail down the
expectations of the behavior of a system, with the benefit that they
are continually verified.</p>

<p>It is also interesting to note that the order in which code is
modified can alter if you are performing a refactoring or not. While
there probably isn&#8217;t a practical difference between the two paths, I
cannot help but wonder if choosing one or the other will have some
practical benefit.</p>

<p>Discuss this post on <a href="http://www.reddit.com/r/programming/comments/nzzfu/when_refactoring_isnt_refactoring/">reddit</a> or <a href="http://news.ycombinator.com/item?id=3416749">Hacker News</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I've learned about testing over the last year]]></title>
    <link href="http://jakegoulding.com/blog/2011/10/10/learned-about-testing-last-year/"/>
    <updated>2011-10-10T19:15:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2011/10/10/learned-about-testing-last-year</id>
    <content type="html"><![CDATA[<p>Over the last year or so, I&#8217;ve been trying to learn about various
types and methodologies of testing. The Ruby community is pretty vocal
about testing, so I felt out of place not knowing even the most basic
of things. This post is intended to organize my current thoughts and
hopefully provide some guidance for people on the same journey.</p>

<!-- more -->


<h2>Who should read this?</h2>

<p>I had to realize two things before I could start learning:</p>

<ol>
<li>I don&#8217;t know enough about testing.</li>
<li>I need to know more about testing.</li>
</ol>


<p>If you don&#8217;t fit into both of these categories, you probably aren&#8217;t
reading this post.</p>

<p>If you know what &#8220;mockist&#8221; and &#8220;classicist&#8221; mean and you know which
you are, you probably already know everything here. If you care, I
generally take the &#8220;mockist&#8221; approach, and this post reflects that.</p>

<p>Otherwise, feel free to continue!</p>

<h2>Why should I test?</h2>

<p>The simplest answer is that testing allows you to have some degree of
confidence that the code as written is right.</p>

<p>Less obvious is the fact that tests give you confidence to change
code. Eventually, some part of the software will need to change
while everything else should stay constant. For me, this point really
hit home when I read <a href="http://www.amazon.com/gp/product/0131177052/ref=as_li_ss_tl?ie=UTF8&amp;tag=jakgousblo-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0131177052">Working Effectively with Legacy Code</a> by Michael Feathers. I deal with lots of code that
needs to be changed and I&#8217;m usually worried that my change might
affect some conceptually remote piece of the software.</p>

<p>Maybe the hardest thing for people to believe is that tests can
provide feedback on the design of the code. This is a core concept
behind Test-Driven Design: if you listen to what your tests tell you
about your code, you can make your code better.</p>

<p>Note that these three things cover the entire life cycle of code;
correctness applies to the <em>present</em> of the feature, confidence comes
into play when the feature is in the <em>past</em>, and design feedback sheds
light into the <em>future</em> of your code.</p>

<h2>What flavors of test exist?</h2>

<p>Here is a list of the types of tests that I can think of purely off the top
of my head, I&#8217;m sure there are lots more.</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Unit_testing">Unit testing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Integration_testing">Integration testing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Functional_testing">Functional testing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Acceptance_testing">Acceptance testing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Load_testing">Load testing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Performance_testing">Performance testing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Fuzz_testing">Fuzz testing</a></li>
</ul>


<p>Those are all links to corresponding Wikipedia page; I don&#8217;t agree
with every nuance listed on those pages, and some pages are
unfortunately short, but the links provide the barest minimum of
a start if you would like to learn more about each type of test.</p>

<p>I don&#8217;t tend to draw a hard line between integration, functional, and
acceptance tests. If you need to know the difference, this
<a href="http://stackoverflow.com/questions/4904096/whats-the-difference-between-unit-functional-acceptance-and-integration-tests">Stack Overflow question</a> has a pretty good breakdown. I
think of acceptance tests as a superset of functional tests, which
are themselves supersets of integration tests.</p>

<p>All I care to talk about in this post are unit and acceptance tests. I
am <em>not</em> saying the other types of testing are not important. I am
saying that I think that unit and acceptance tests are the most
useful types of tests to start with.</p>

<p>I am nominally a programmer, and this post will exhibit that
bias. I certainly hope that people approaching testing from a
different angle can benefit from this post, but no guarantees are
made.</p>

<h2>How do acceptance and unit tests fit together?</h2>

<p>A great way to understand how acceptance and unit tests work in
concert is to read <a href="http://www.amazon.com/gp/product/1934356379/ref=as_li_ss_tl?ie=UTF8&amp;tag=jakgousblo-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=1934356379">The RSpec Book</a>. If you are too lazy
and/or cheap to read it, here&#8217;s one extremely salient picture:</p>

<p><img src="http://jakegoulding.com/images/blog/bdd-cycle.png" alt="The BDD test/develop cycle" /></p>

<p>The extremely abridged version is that you write an <strong>acceptance
test</strong> for the feature you want. This test should be written from the
point-of-view of the user and using terms that a user would use.</p>

<p>As you try to make the acceptance test pass, you will realize that you
need to write smaller components to solve the larger problem. In an
object-oriented language, these components will probably be
objects. The test for each component is a <strong>unit test</strong>.</p>

<h2>Acceptance tests</h2>

<p>Acceptance tests tell you that the software as a whole does what it is
supposed to do. It&#8217;s important to write acceptance tests as if you
were the user. This makes it so that the test exposes the actual
<em>value</em> of the code, explaining <em>why</em> the code even exists.</p>

<p>To write proper acceptance tests, you need to have complete control
over the entire environment your software runs in. If you interact
with a database, you must be able to change data in the database. If
you need to be able to parse an empty RSS feed, then you must be able
to create an empty RSS feed to test that functionality.</p>

<p>Because acceptance tests exercise the entire system, it&#8217;s very easy
for them to be slow, but there are a few techniques that you can use
to help keep your total time down.</p>

<p>Acceptance tests should cover the &#8220;happy path&#8221; of your software. If
there are any extremely important failure cases, then cover those with
acceptance tests as well. However, you don&#8217;t need to cover every
possible case. For example, use unit tests to ensure that things that
generate errors do so consistently, and then use one acceptance test
to make sure errors are shown correctly.</p>

<p>Make sure that you minimize what data you need for an acceptance
test. You probably don&#8217;t need to load 10,000 rows into your database
just to make sure that a user can view their profile. Use the smallest
amount of data you can get away with.</p>

<p>Don&#8217;t get lazy and reuse one giant piece of setup code for every
test. This is an example of the tests telling you that your design is
painful to use. In this case, a user would have to duplicate all of
the steps in the setup in order to use the function you are
testing. Maybe that&#8217;s the way it has to be, but try to make it
easier on the user.</p>

<h2>Unit tests</h2>

<p>Unit tests have some exciting qualities for a developer. Generally,
unit tests are <em>fast</em> and can isolate exactly the one thing that is
broken. Achieving these goals takes hard work.</p>

<p>Limiting each unit test to one assertion enables isolation of
faults. If a test fails, the name of the test by itself should serve
to tell you exactly what went wrong. If you have multiple assertions,
then you have to look at the failing line number to determine the real
issue.</p>

<h3>Mock objects</h3>

<p>One way to achieve isolation and speed in your unit tests is to
introduce <em>mock objects</em>. Mock objects are <em>test doubles</em> that
surround the real code under test and assert on the messages sent
between objects. Since they aren&#8217;t real objects, they can&#8217;t affect
your test correctness, and they are extremely lightweight so they will
be fast.</p>

<p>Seems easy to use mocks, right? Just create some dummy objects that
responds to the necessary methods and returns values as needed. Then
point the object under test at the mock objects, run the code, and
assert that tested object has used any returned values correctly.</p>

<p>Here&#8217;s an example of doing that in Ruby. I&#8217;m eschewing using any
libraries in an attempt to make the code as obvious as possible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="n">foo</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">calculate_foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@foo</span> <span class="o">=</span> <span class="n">bar</span><span class="o">.</span><span class="n">quux</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BarDouble</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quux</span>
</span><span class='line'>    <span class="mi">100</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">calculate_foo</span><span class="p">(</span><span class="no">BarDouble</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">foo</span> <span class="o">==</span> <span class="mi">200</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sorry, I lied to you; that last example was <em>not</em> a mock - although I
thought it was for the longest time. The double shown is actually a
<em>stub</em>. The key point is that a mock <strong>asserts messages are
sent</strong>. The example above asserts a state.</p>

<p>Here is a test that correctly uses a mock:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">calculate_foo</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@foo</span> <span class="o">=</span> <span class="n">bar</span><span class="o">.</span><span class="n">quux</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BarMock</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quux_called?</span>
</span><span class='line'>    <span class="vi">@quux_called</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quux</span>
</span><span class='line'>    <span class="vi">@quux_called</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="mi">100</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="no">BarMock</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">calculate_foo</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">b</span><span class="o">.</span><span class="n">quux_called?</span>
</span></code></pre></td></tr></table></div></figure>


<p>This last example uses a mock to assert that the right messages were
sent. Note that we removed the <code>foo</code> accessor from the first class; we
don&#8217;t need it anymore! The state of the object is now kept where it
should be - inside the object.</p>

<p>The difference between stubs and mocks can seem subtle, but it is
important. For a much richer discussion, read <a href="http://martinfowler.com/articles/mocksArentStubs.html">Mocks Aren&#8217;t Stubs</a> by Martin Fowler.</p>

<p>I make no claim that this example is a <em>good</em> use of mocks, just that
it is how mocks are to be used.</p>

<h3>Object-oriented programming and mocks</h3>

<p>This is all recent information that started to worm its way into my
brain after watching <a href="http://confreaks.net/videos/659-rubyconf2011-why-you-don-t-get-mock-objects">Why You Don&#8217;t Get Mock Objects</a>
- you should watch it too.</p>

<p>The code example above may still have a problem. The <code>Foo</code> object asks
the <code>Bar</code> object for the value of <code>quux</code> and then manipulates the
result. This goes against the <a href="http://pragprog.com/articles/tell-dont-ask">Tell, Don&#8217;t Ask</a> principle, and
could be a warning sign of <a href="http://c2.com/cgi/wiki?FeatureEnvySmell">Feature Envy</a>.</p>

<p>You should only mock collaborators. Collaborators are objects that are
peers of the object under test. Collaborators should not be confused
with objects that simply serve as implementation details. If you store
a bit of state in a string or some integers, those are internal
details and should not be mocked out.</p>

<h3>Example of applying these ideas to real code</h3>

<p>This is a real (but anonymized) feature and test example. We have a
piece of code that manipulates data retrieved via HTTP. This retrieval
can be fairly expensive, so we want to cache the final manipulated
result. The code that does the manipulation and caching is separated
from the HTTP call by a few intermediate objects.</p>

<p><img src="http://jakegoulding.com/images/blog/mock-example-current.png" alt="The current code setup" /></p>

<p>Our current testing strategy is to provide fake data at the end of the
chain, effectively short-circuiting the HTTP call. We also count the
number of times that the HTTP call is made, and the test fails if the
call is made more than once.</p>

<p><img src="http://jakegoulding.com/images/blog/mock-example-current-test.png" alt="The current test setup" /></p>

<p>One obvious downside is that if <em>any</em> of the intermediate objects
decide they need to make an HTTP call themselves, our test will
fail. What&#8217;s worse is that the failure will seem to indicate that the
caching is not working, so we will start debugging there. When we
finally figure out that the test is &#8220;lying&#8221; to us, we will have wasted
time and started to distrust our tests.</p>

<p>We can make the test better if we move the test double closer to the
code under test. This lets us ignore all the other objects in the call
chain - if one of these other objects does not behave properly, this
test will not fail. This is no free lunch; there <strong>must</strong> be unit
tests that focus on the other objects so you can tell when they break!</p>

<p><img src="http://jakegoulding.com/images/blog/mock-example-next-test.png" alt="A better test setup" /></p>

<p>While writing the caching tests, we should notice that there are two
sets of unrelated tests: one that checks that the core functionality
works, and one that checks that the caching works. This should
influence us to split the object apart (better known as the
<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a>).</p>

<p><img src="http://jakegoulding.com/images/blog/mock-example-srp.png" alt="A better code setup" /></p>

<p>Splitting the caching into a separate object will allow us to test the
caching behavior in isolation.</p>

<p><img src="http://jakegoulding.com/images/blog/mock-example-srp-test.png" alt="Even better test setup" /></p>

<h2>A handful of things to learn next</h2>

<p>My learning isn&#8217;t over, and hopefully never will be. Here is a sample
of some questions currently percolating in my brain.</p>

<p>Acceptance tests are often slow because they hit an external
resource. Ruby has a gem called <a href="https://github.com/myronmarston/vcr">VCR</a> (and Java has a clone
called <a href="https://github.com/robfletcher/betamax">Betamax</a>) that record HTTP requests and responses and
then play them back during subsequent test runs. By definition, using
one of these tools means you are no longer always doing true
integration tests. However, the speedup is usually noticeable.</p>

<ul>
<li>When should you use this type of tool?</li>
<li>What are the positives and negatives of this kind of tool?</li>
<li>How frequently do you clear the cache of saved responses?</li>
<li>Can the concept be easily extended to non-HTTP protocols?</li>
</ul>


<p>Ideally, you should never add code simply to make something
testable. At that point, you are adding complexity to a system that
will not benefit from that complexity. My pragmatic side says that
sometimes you have to add hooks only to be used for testing.</p>

<ul>
<li>Do you really need to add these hooks?</li>
<li>Is there a general type of design that avoids the need for the
hooks?</li>
<li>Is adding this kind of hook worth it?</li>
</ul>


<h2>Things you should read or watch</h2>

<h5><a href="http://www.amazon.com/gp/product/1934356379/ref=as_li_ss_tl?ie=UTF8&amp;tag=jakgousblo-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=1934356379">The RSpec Book</a> (book)</h5>

<p>Although the book seems like it will only be about Ruby, it actually
covers the concepts of testing thoroughly. Introduced me to the
{acceptance,unit}-test cycle. Also contains practical information if
you will be testing in Ruby.</p>

<h5><a href="http://martinfowler.com/articles/mocksArentStubs.html">Mocks Aren&#8217;t Stubs</a> (article)</h5>

<p>Provides an overview of terms used as well as examples to help
separate the different concepts (in Java, but don&#8217;t be
scared). Defines &#8220;classicist&#8221; and &#8220;mockist&#8221;; you don&#8217;t need to pick
one or the other, but understanding them is vital.</p>

<h5><a href="http://confreaks.net/videos/659-rubyconf2011-why-you-don-t-get-mock-objects">Why You Don&#8217;t Get Mock Objects</a> (video)</h5>

<p>Session from RubyConf 2011 that started to clarify certain aspects of
mocking and testing. Gregory Moeck also introduced me to the term
&#8220;secondary teacher&#8221;.</p>

<h5><a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_ss_tl?ie=UTF8&amp;tag=jakgousblo-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0321503627">Growing Object-Oriented Software</a> (book)</h5>

<p>On my list of books to order and read. I used to think that I
understood Object-Oriented Programming, but recent developments have
changed that belief.  I hope that reading this can help guide me to a
better understanding.</p>

<h5><a href="http://www.amazon.com/gp/product/0131177052/ref=as_li_ss_tl?ie=UTF8&amp;tag=jakgousblo-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0131177052">Working Effectively with Legacy Code</a> (book)</h5>

<p>Excellent information about how to take legacy code (defined as code
without tests) and make it non-legacy. Clarified how tests let you be
confident about changes. Provides heaps of practical advice.</p>

<h2>Tell me what I&#8217;ve said wrong</h2>

<p>I&#8217;m certain that I&#8217;ve said something that someone will disagree
with. If you&#8217;d care to correct my false ideas, feel free to contact me
via Twitter. If you think it will take longer than a tweet, create a
blog post and let me know about it!</p>

<h2>Edits</h2>

<h5>2011-10-11 9:27 EDT</h5>

<p>Fixed bad link and cleaned up some poor wording.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly fixing your last Git commit]]></title>
    <link href="http://jakegoulding.com/blog/2011/09/18/quickly-fixing-your-last-git-commit/"/>
    <updated>2011-09-18T13:53:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2011/09/18/quickly-fixing-your-last-git-commit</id>
    <content type="html"><![CDATA[<p>Git encourages you to create commits early and frequently, but I often
find that my last commit isn&#8217;t quite as awesome as I&#8217;d like it to
be. However, there are three little tricks I use to tweak it a bit.</p>

<!-- more -->


<p>The main use for amending your commit is changing your last commit
message:</p>

<pre><code>$ git commit --amend
</code></pre>

<p>However, if you add files before you amend your commit, those files
will be combined with the commit. This is great if you missed a file,
or if you forgot to save that very last change in your editor.</p>

<pre><code>$ git add README.txt
$ git commit --amend
</code></pre>

<p>Amending your commit will bring up your editor to change your commit
message; what should you do if your previous message was just fine?
Just reuse the commit message!</p>

<pre><code>$ git add README.txt
$ git commit --amend -C HEAD
</code></pre>

<p>This is conceptually the same as the &#8220;fixup&#8221; command when rebasing, so
you could alias it as <code>git fixup</code>.</p>

<pre><code>$ git add README.txt
$ git fixup
</code></pre>

<h4>Update - 8:30 PM EDT</h4>

<p><a href="http://twitter.com/nick_rutherford">Nick Rutherford</a> reminded me to caution everyone that you should
never amend your commit <em>after</em> you have pushed it or made it public
in some fashion. This is for the same reason that you should never
rebase commits that are already public: you are changing history that
other people may have already grabbed a copy of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game of Life in Clojure]]></title>
    <link href="http://jakegoulding.com/blog/2011/09/18/game-of-life-in-clojure/"/>
    <updated>2011-09-18T11:22:00-04:00</updated>
    <id>http://jakegoulding.com/blog/2011/09/18/game-of-life-in-clojure</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been trying to learn <a href="http://clojure.org">Clojure</a> recently, so I wrote
<a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway&#8217;s Game of Life</a>. I&#8217;m sure that the code is highly
non-idiomatic, but I&#8217;d rather get it out into the wild, instead of
sitting on my disk.</p>

<!-- more -->


<p>Note that I have inline tests (the simple <code>println</code> statements) mostly
because I wasn&#8217;t trying to figure out how to properly test in Clojure
(yet).</p>

<figure class='code'><figcaption><span> (life.clj)</span> <a href='http://jakegoulding.com/downloads/code/life.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.set</span> <span class="ss">:as</span> <span class="nv">set</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; I feel that there are too many explicit conversions with `set`, but</span>
</span><span class='line'><span class="c1">;; I&#39;m not sure how to remove them.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Reusable test cells</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">center</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">top-left</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">-1</span> <span class="ss">:y</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">top-right</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">1</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">bottom-left</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">-1</span> <span class="ss">:y</span> <span class="mi">-1</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">bottom-right</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">-1</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">neighbors</span>
</span><span class='line'>  <span class="s">&quot;Finds all cells that are neighbors of the given cell&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cell</span> <span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">neighbor?</span> <span class="p">[</span><span class="nv">poss</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="p">(</span><span class="nf">poss</span> <span class="ss">:x</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nf">cell</span> <span class="ss">:x</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nf">poss</span> <span class="ss">:x</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nf">cell</span> <span class="ss">:x</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">&gt;= </span><span class="p">(</span><span class="nf">poss</span> <span class="ss">:y</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nf">cell</span> <span class="ss">:y</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nf">poss</span> <span class="ss">:y</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nf">cell</span> <span class="ss">:y</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="nv">poss</span> <span class="nv">cell</span><span class="p">))))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">filter </span><span class="nv">neighbor?</span> <span class="nv">cells</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;* neighbors&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">bottom-left</span> <span class="nv">top-right</span><span class="p">}</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">neighbors</span> <span class="nv">center</span> <span class="p">[</span><span class="nv">bottom-left</span> <span class="nv">center</span> <span class="nv">top-right</span><span class="p">])))</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">center</span><span class="p">}</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">neighbors</span> <span class="nv">bottom-left</span> <span class="p">[</span><span class="nv">bottom-left</span> <span class="nv">center</span> <span class="nv">top-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kill-off</span>
</span><span class='line'>  <span class="s">&quot;Removes cells that do not have enough neighbors to stay alive&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">n_neighbors</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nf">neighbors</span> <span class="nv">%</span> <span class="nv">cells</span><span class="p">))]</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">n_neighbors</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">&gt; </span><span class="nv">n_neighbors</span> <span class="mi">3</span><span class="p">)))</span>
</span><span class='line'>               <span class="nv">cells</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;* kill-off&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with no neighbors dies</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with one neighbor dies</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span> <span class="nv">top-left</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with two neighbors lives</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">center</span><span class="p">}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span> <span class="nv">top-left</span> <span class="nv">top-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with three neighbors lives</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">center</span><span class="p">}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span> <span class="nv">top-left</span> <span class="nv">top-right</span> <span class="nv">bottom-left</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Cell with four neighbors dies</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="p">[</span><span class="nv">center</span> <span class="nv">top-left</span> <span class="nv">top-right</span> <span class="nv">bottom-left</span> <span class="nv">bottom-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">all-neighbors</span>
</span><span class='line'>  <span class="s">&quot;Finds the cells in a 3x3 area around the given cell&quot;</span>
</span><span class='line'>  <span class="p">[{</span><span class="nv">x</span> <span class="ss">:x</span> <span class="nv">y</span> <span class="ss">:y</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x-mod</span> <span class="p">(</span><span class="nb">range </span><span class="mi">-1</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">y-mod</span> <span class="p">(</span><span class="nb">range </span><span class="mi">-1</span> <span class="mi">2</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:x</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">x-mod</span><span class="p">)</span> <span class="ss">:y</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="nv">y-mod</span><span class="p">)}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">interesting-cells</span>
</span><span class='line'>  <span class="s">&quot;Finds all cells that could potentially change on a given step&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="nv">set/union</span> <span class="p">(</span><span class="nb">map </span><span class="nv">all-neighbors</span> <span class="nv">cells</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fringe</span>
</span><span class='line'>  <span class="s">&quot;Finds all cells that are currently dead but could come alive&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set/difference</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nf">interesting-cells</span> <span class="nv">cells</span><span class="p">))</span>
</span><span class='line'>                  <span class="nv">cells</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">come-alive</span>
</span><span class='line'>  <span class="s">&quot;Finds all cells that are currently dead but will come alive&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">== </span><span class="mi">3</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nf">neighbors</span> <span class="nv">%</span> <span class="nv">cells</span><span class="p">))))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">fringe</span> <span class="nv">cells</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;* come-alive&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with no neighbors stays dead</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with one neighbor stays dead</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[</span><span class="nv">top-left</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with two neighbors stays dead</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[</span><span class="nv">top-left</span> <span class="nv">top-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with three neighbors comes alive</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{</span><span class="nv">center</span><span class="p">}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[</span><span class="nv">top-left</span> <span class="nv">top-right</span> <span class="nv">bottom-left</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Empty cell with four neighbors stays dead</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">= </span><span class="o">#</span><span class="p">{}</span> <span class="p">(</span><span class="nf">come-alive</span> <span class="p">[</span><span class="nv">top-left</span> <span class="nv">top-right</span> <span class="nv">bottom-left</span> <span class="nv">bottom-right</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">step</span>
</span><span class='line'>  <span class="s">&quot;Returns the cells that are still alive after or came alive during a single time step&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set/union</span> <span class="p">(</span><span class="nf">kill-off</span> <span class="nv">cells</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">come-alive</span> <span class="nv">cells</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Printing functions</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Have a 21x21 window into the world</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">min-x</span> <span class="mi">-10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max-x</span>  <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">min-y</span> <span class="mi">-10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max-y</span>  <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">print-cell</span> <span class="p">[</span><span class="nv">cell</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="nv">cell</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print </span><span class="s">&quot;X&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print </span><span class="s">&quot; &quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">print-row</span> <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dorun </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">x</span> <span class="p">(</span><span class="nb">range </span><span class="nv">min-x</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">max-x</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">print-cell</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="p">(</span><span class="nf">%</span> <span class="ss">:x</span><span class="p">))</span> <span class="nv">cells</span><span class="p">)))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">println</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">print-cells</span> <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;---&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dorun </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">y</span> <span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">range </span><span class="nv">min-y</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">max-y</span><span class="p">)))]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">print-row</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="nv">y</span> <span class="p">(</span><span class="nf">%</span> <span class="ss">:y</span><span class="p">))</span> <span class="nv">cells</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;---&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Two mildly-interesting start states</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">blinker</span> <span class="p">[{</span><span class="ss">:x</span> <span class="mi">-1</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">glider</span> <span class="p">[{</span><span class="ss">:x</span> <span class="mi">2</span> <span class="ss">:y</span> <span class="mi">2</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">2</span> <span class="ss">:y</span> <span class="mi">1</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">2</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">1</span> <span class="ss">:y</span> <span class="mi">0</span><span class="p">}</span> <span class="p">{</span><span class="ss">:x</span> <span class="mi">0</span> <span class="ss">:y</span> <span class="mi">1</span><span class="p">}])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">initial-state</span> <span class="nv">glider</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">life</span> <span class="p">(</span><span class="nb">iterate </span><span class="nv">step</span> <span class="nv">initial-state</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">i</span> <span class="mi">50</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">print-cells</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">life</span> <span class="nv">i</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
